
AVRASM ver. 2.2.8  C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\main.asm Wed Nov 30 15:47:37 2022

[builtin](2): Including file 'C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\m32U4def.inc'
C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\main.asm(17): Including file 'C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\m32U4def.inc'
C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\main.asm(663): Including file 'C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\LCDDriver.asm'
C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\LCDDriver.asm(31): Including file 'C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\m32U4def.inc'
C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\main.asm(664): Including file 'C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\StringManager.asm'
C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\StringManager.asm(8): Including file 'C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\m32U4def.inc'
[builtin](2): Including file 'C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\m32U4def.inc'
C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\main.asm(17): Including file 'C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\m32U4def.inc'
C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\main.asm(663): Including file 'C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\LCDDriver.asm'
C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\LCDDriver.asm(31): Including file 'C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\m32U4def.inc'
C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\main.asm(664): Including file 'C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\StringManager.asm'
C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\StringManager.asm(8): Including file 'C:\Users\jwilt\OneDrive\Documents\School\ECE375\Lab7\Lab7\m32U4def.inc'
                                 
                                 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32U4.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32U4def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32U4
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32U4
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32U4DEF_INC_
                                 #define _M32U4DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega32U4
                                 #pragma AVRPART ADMIN PART_NAME ATmega32U4
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x87
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	PLLCSR	= 0x29
                                 .equ	PLLFRQ	= 0x32
                                 .equ	UEINT	= 0xf4	; MEMORY MAPPED
                                 .equ	UEBCHX	= 0xf3	; MEMORY MAPPED
                                 .equ	UEBCLX	= 0xf2	; MEMORY MAPPED
                                 .equ	UEDATX	= 0xf1	; MEMORY MAPPED
                                 .equ	UEIENX	= 0xf0	; MEMORY MAPPED
                                 .equ	UESTA1X	= 0xef	; MEMORY MAPPED
                                 .equ	UESTA0X	= 0xee	; MEMORY MAPPED
                                 .equ	UECFG1X	= 0xed	; MEMORY MAPPED
                                 .equ	UECFG0X	= 0xec	; MEMORY MAPPED
                                 .equ	UECONX	= 0xeb	; MEMORY MAPPED
                                 .equ	UERST	= 0xea	; MEMORY MAPPED
                                 .equ	UENUM	= 0xe9	; MEMORY MAPPED
                                 .equ	UEINTX	= 0xe8	; MEMORY MAPPED
                                 .equ	UDMFN	= 0xe6	; MEMORY MAPPED
                                 .equ	UDFNUMH	= 0xe5	; MEMORY MAPPED
                                 .equ	UDFNUML	= 0xe4	; MEMORY MAPPED
                                 .equ	UDADDR	= 0xe3	; MEMORY MAPPED
                                 .equ	UDIEN	= 0xe2	; MEMORY MAPPED
                                 .equ	UDINT	= 0xe1	; MEMORY MAPPED
                                 .equ	UDCON	= 0xe0	; MEMORY MAPPED
                                 .equ	USBINT	= 0xda	; MEMORY MAPPED
                                 .equ	USBSTA	= 0xd9	; MEMORY MAPPED
                                 .equ	USBCON	= 0xd8	; MEMORY MAPPED
                                 .equ	UHWCON	= 0xd7	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	RCCTRL	= 0x67	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	DT4	= 0xd4	; MEMORY MAPPED
                                 .equ	OCR4D	= 0xd2	; MEMORY MAPPED
                                 .equ	OCR4C	= 0xd1	; MEMORY MAPPED
                                 .equ	OCR4B	= 0xd0	; MEMORY MAPPED
                                 .equ	OCR4A	= 0xcf	; MEMORY MAPPED
                                 .equ	TCCR4E	= 0xc4	; MEMORY MAPPED
                                 .equ	TCCR4D	= 0xc3	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xc2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xc1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xc0	; MEMORY MAPPED
                                 .equ	TC4H	= 0xbf	; MEMORY MAPPED
                                 .equ	TCNT4	= 0xbe	; MEMORY MAPPED
                                 .equ	CLKSEL1	= 0xc6	; MEMORY MAPPED
                                 .equ	CLKSEL0	= 0xc5	; MEMORY MAPPED
                                 .equ	CLKSTA	= 0xc7	; MEMORY MAPPED
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; DT4 - Timer/Counter 4 Dead Time Value
                                 .equ	DT4L0	= 0	; Timer/Counter 4 Dead Time Value Bit 0
                                 .equ	DT4L1	= 1	; Timer/Counter 4 Dead Time Value Bit 1
                                 .equ	DT4L2	= 2	; Timer/Counter 4 Dead Time Value Bit 2
                                 .equ	DT4L3	= 3	; Timer/Counter 4 Dead Time Value Bit 3
                                 .equ	DT4L4	= 4	; Timer/Counter 4 Dead Time Value Bit 4
                                 .equ	DT4L5	= 5	; Timer/Counter 4 Dead Time Value Bit 5
                                 .equ	DT4L6	= 6	; Timer/Counter 4 Dead Time Value Bit 6
                                 .equ	DT4L7	= 7	; Timer/Counter 4 Dead Time Value Bit 7
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 2	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4B	= 5	; Output Compare Flag 4B
                                 .equ	OCF4A	= 6	; Output Compare Flag 4A
                                 .equ	OCF4D	= 7	; Output Compare Flag 4D
                                 
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 2	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4B	= 5	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4A	= 6	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4D	= 7	; Timer/Counter4 Output Compare D Match Interrupt Enable
                                 
                                 ; OCR4D - Timer/Counter4 Output Compare Register D
                                 .equ	OCR4D0	= 0	; Timer/Counter4 Output Compare Register Low Byte bit 0
                                 .equ	OCR4D1	= 1	; Timer/Counter4 Output Compare Register Low Byte bit 1
                                 .equ	OCR4D2	= 2	; Timer/Counter4 Output Compare Register Low Byte bit 2
                                 .equ	OCR4D3	= 3	; Timer/Counter4 Output Compare Register Low Byte bit 3
                                 .equ	OCR4D4	= 4	; Timer/Counter4 Output Compare Register Low Byte bit 4
                                 .equ	OCR4D5	= 5	; Timer/Counter4 Output Compare Register Low Byte bit 5
                                 .equ	OCR4D6	= 6	; Timer/Counter4 Output Compare Register Low Byte bit 6
                                 .equ	OCR4D7	= 7	; Timer/Counter4 Output Compare Register Low Byte bit 7
                                 
                                 ; OCR4C - Timer/Counter4 Output Compare Register C
                                 .equ	OCR4C0	= 0	; Timer/Counter4 Output Compare Register bit 0
                                 .equ	OCR4C1	= 1	; Timer/Counter4 Output Compare Register bit 1
                                 .equ	OCR4C2	= 2	; Timer/Counter4 Output Compare Register bit 2
                                 .equ	OCR4C3	= 3	; Timer/Counter4 Output Compare Register bit 3
                                 .equ	OCR4C4	= 4	; Timer/Counter4 Output Compare Register bit 4
                                 .equ	OCR4C5	= 5	; Timer/Counter4 Output Compare Register bit 5
                                 .equ	OCR4C6	= 6	; Timer/Counter4 Output Compare Register 6
                                 .equ	OCR4C7	= 7	; Timer/Counter4 Output Compare Register bit 7
                                 
                                 ; OCR4B - Timer/Counter4 Output Compare Register B
                                 .equ	OCR4B0	= 0	; Timer/Counter4 Output Compare Register bit 0
                                 .equ	OCR4B1	= 1	; Timer/Counter4 Output Compare Register bit 1
                                 .equ	OCR4B2	= 2	; Timer/Counter4 Output Compare Register bit 2
                                 .equ	OCR4B3	= 3	; Timer/Counter4 Output Compare Register bit 3
                                 .equ	OCR4B4	= 4	; Timer/Counter4 Output Compare Register bit 4
                                 .equ	OCR4B5	= 5	; Timer/Counter4 Output Compare Register bit 5
                                 .equ	OCR4B6	= 6	; Timer/Counter4 Output Compare Register bit 6
                                 .equ	OCR4B7	= 7	; Timer/Counter4 Output Compare Register bit 7
                                 
                                 ; OCR4A - Timer/Counter4 Output Compare Register A
                                 .equ	OCR4A0	= 0	; Timer/Counter4 Output Compare Register Bit 0
                                 .equ	OCR4A1	= 1	; Timer/Counter4 Output Compare Register Bit 1
                                 .equ	OCR4A2	= 2	; Timer/Counter4 Output Compare Register Low Byte Bit 2
                                 .equ	OCR4A3	= 3	; Timer/Counter4 Output Compare Register Low Byte Bit 3
                                 .equ	OCR4A4	= 4	; Timer/Counter4 Output Compare Register Bit 4
                                 .equ	OCR4A5	= 5	; Timer/Counter4 Output Compare Register Bit 5
                                 .equ	OCR4A6	= 6	; Timer/Counter4 Output Compare Register Bit 6
                                 .equ	OCR4A7	= 7	; Timer/Counter4 Output Compare Register Bit 7
                                 
                                 ; TC4H - Timer/Counter4
                                 .equ	TC48	= 0	; Timer/Counter4 bit 8
                                 .equ	TC49	= 1	; Timer/Counter4 bit 9
                                 .equ	TC410	= 2	; Timer/Counter4 bit 10
                                 
                                 ; TCNT4 - Timer/Counter4 Low Bytes
                                 .equ	TC40	= 0	; Timer/Counter4 bit 0
                                 .equ	TC41	= 1	; Timer/Counter4 bit 1
                                 .equ	TC42	= 2	; Timer/Counter4 bit 2
                                 .equ	TC43	= 3	; Timer/Counter4  bit 3
                                 .equ	TC44	= 4	; Timer/Counter4 bit 4
                                 .equ	TC45	= 5	; Timer/Counter4 bit 5
                                 .equ	TC46	= 6	; Timer/Counter4 bit 6
                                 .equ	TC47	= 7	; Timer/Counter4 bit 7
                                 
                                 ; TCCR4E - Timer/Counter 4 Control Register E
                                 .equ	OC4OE0	= 0	; Output Compare Override Enable bit
                                 .equ	OC4OE1	= 1	; Output Compare Override Enable bit
                                 .equ	OC4OE2	= 2	; Output Compare Override Enable bit
                                 .equ	OC4OE3	= 3	; Output Compare Override Enable bit
                                 .equ	OC4OE4	= 4	; Output Compare Override Enable bit
                                 .equ	OC4OE5	= 5	; Output Compare Override Enable bit
                                 .equ	ENHC4	= 6	; Enhanced Compare/PWM Mode
                                 .equ	TLOCK4	= 7	; Register Update Lock
                                 
                                 ; TCCR4D - Timer/Counter 4 Control Register D
                                 .equ	WGM40	= 0	; Waveform Generation Mode bits
                                 .equ	WGM41	= 1	; Waveform Generation Mode bits
                                 .equ	FPF4	= 2	; Fault Protection Interrupt Flag
                                 .equ	FPAC4	= 3	; Fault Protection Analog Comparator Enable
                                 .equ	FPES4	= 4	; Fault Protection Edge Select
                                 .equ	FPNC4	= 5	; Fault Protection Noise Canceler
                                 .equ	FPEN4	= 6	; Fault Protection Mode Enable
                                 .equ	FPIE4	= 7	; Fault Protection Interrupt Enable
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	PWM4D	= 0	; Pulse Width Modulator D Enable
                                 .equ	FOC4D	= 1	; Force Output Compare Match 4D
                                 .equ	COM4D0	= 2	; Comparator D Output Mode
                                 .equ	COM4D1	= 3	; Comparator D Output Mode
                                 .equ	COM4B0S	= 4	; Comparator B Output Mode
                                 .equ	COM4B1S	= 5	; Comparator B Output Mode
                                 .equ	COM4A0S	= 6	; Comparator A Output Mode
                                 .equ	COM4A1S	= 7	; Comparator A Output Mode
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Clock Select Bit 0
                                 .equ	CS41	= 1	; Clock Select Bit 1
                                 .equ	CS42	= 2	; Clock Select Bit 2
                                 .equ	CS43	= 3	; Clock Select Bit 3
                                 .equ	DTPS40	= 4	; Dead Time Prescaler Bit 0
                                 .equ	DTPS41	= 5	; Dead Time Prescaler Bit 1
                                 .equ	PSR4	= 6	; Prescaler Reset Timer/Counter 4
                                 .equ	PWM4X	= 7	; PWM Inversion Mode
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	PWM4B	= 0	; 
                                 .equ	PWM4A	= 1	; 
                                 .equ	FOC4B	= 2	; Force Output Compare Match 4B
                                 .equ	FOC4A	= 3	; Force Output Compare Match 4A
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE6	= 6	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE6	= 6	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source 2
                                 .equ	ADTS3	= 4	; ADC Auto Trigger Source 3
                                 .equ	MUX5	= 5	; Analog Channel and Gain Selection Bits
                                 .equ	ADHSM	= 7	; ADC High Speed Mode
                                 
                                 ; DIDR0 - Digital Input Disable Register 1
                                 .equ	ADC0D	= 0	; ADC0 Digital input Disable
                                 .equ	ADC1D	= 1	; ADC1 Digital input Disable
                                 .equ	ADC2D	= 2	; ADC2 Digital input Disable
                                 .equ	ADC3D	= 3	; ADC3 Digital input Disable
                                 .equ	ADC4D	= 4	; ADC4 Digital input Disable
                                 .equ	ADC5D	= 5	; ADC5 Digital input Disable
                                 .equ	ADC6D	= 6	; ADC6 Digital input Disable
                                 .equ	ADC7D	= 7	; ADC7 Digital input Disable
                                 
                                 ; DIDR2 - Digital Input Disable Register 1
                                 .equ	ADC8D	= 0	; ADC8 Digital input Disable
                                 .equ	ADC9D	= 1	; ADC9 Digital input Disable
                                 .equ	ADC10D	= 2	; ADC10 Digital input Disable
                                 .equ	ADC11D	= 3	; ADC11 Digital input Disable
                                 .equ	ADC12D	= 4	; ADC12 Digital input Disable
                                 .equ	ADC13D	= 5	; ADC13 Digital input Disable
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - 
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; RCCTRL - Oscillator Control Register
                                 .equ	RCFREQ	= 0	; 
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRUSB	= 7	; Power Reduction USB
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 ; CLKSTA - 
                                 .equ	EXTON	= 0	; 
                                 .equ	RCON	= 1	; 
                                 
                                 ; CLKSEL0 - 
                                 .equ	CLKS	= 0	; 
                                 .equ	EXTE	= 2	; 
                                 .equ	RCE	= 3	; 
                                 .equ	EXSUT0	= 4	; 
                                 .equ	EXSUT1	= 5	; 
                                 .equ	RCSUT0	= 6	; 
                                 .equ	RCSUT1	= 7	; 
                                 
                                 ; CLKSEL1 - 
                                 .equ	EXCKSEL0	= 0	; 
                                 .equ	EXCKSEL1	= 1	; 
                                 .equ	EXCKSEL2	= 2	; 
                                 .equ	EXCKSEL3	= 3	; 
                                 .equ	RCCKSEL0	= 4	; 
                                 .equ	RCCKSEL1	= 5	; 
                                 .equ	RCCKSEL2	= 6	; 
                                 .equ	RCCKSEL3	= 7	; 
                                 
                                 
                                 ; ***** PLL **************************
                                 ; PLLCSR - PLL Status and Control register
                                 .equ	PLOCK	= 0	; PLL Lock Status Bit
                                 .equ	PLLE	= 1	; PLL Enable Bit
                                 .equ	PINDIV	= 4	; PLL prescaler Bit 2
                                 
                                 ; PLLFRQ - PLL Frequency Control Register
                                 .equ	PDIV0	= 0	; 
                                 .equ	PDIV1	= 1	; 
                                 .equ	PDIV2	= 2	; 
                                 .equ	PDIV3	= 3	; 
                                 .equ	PLLTM0	= 4	; 
                                 .equ	PLLTM1	= 5	; 
                                 .equ	PLLUSB	= 6	; 
                                 .equ	PINMUX	= 7	; 
                                 
                                 
                                 ; ***** USB_DEVICE *******************
                                 ; USBCON - USB General Control Register
                                 .equ	VBUSTE	= 0	; 
                                 .equ	OTGPADE	= 4	; 
                                 .equ	FRZCLK	= 5	; 
                                 .equ	USBE	= 7	; 
                                 
                                 ; UDCON - 
                                 .equ	DETACH	= 0	; 
                                 .equ	RMWKUP	= 1	; 
                                 .equ	LSM	= 2	; USB low speed mode
                                 .equ	RSTCPU	= 3	; 
                                 
                                 ; UDINT - 
                                 .equ	SUSPI	= 0	; 
                                 .equ	SOFI	= 2	; 
                                 .equ	EORSTI	= 3	; 
                                 .equ	WAKEUPI	= 4	; 
                                 .equ	EORSMI	= 5	; 
                                 .equ	UPRSMI	= 6	; 
                                 
                                 ; UDIEN - 
                                 .equ	SUSPE	= 0	; 
                                 .equ	SOFE	= 2	; 
                                 .equ	EORSTE	= 3	; 
                                 .equ	WAKEUPE	= 4	; 
                                 .equ	EORSME	= 5	; 
                                 .equ	UPRSME	= 6	; 
                                 
                                 ; UDADDR - 
                                 .equ	UADD0	= 0	; 
                                 .equ	UADD1	= 1	; 
                                 .equ	UADD2	= 2	; 
                                 .equ	UADD3	= 3	; 
                                 .equ	UADD4	= 4	; 
                                 .equ	UADD5	= 5	; 
                                 .equ	UADD6	= 6	; 
                                 .equ	ADDEN	= 7	; 
                                 
                                 ; UDFNUML - 
                                 .equ	FNUM0	= 0	; 
                                 .equ	FNUM1	= 1	; 
                                 .equ	FNUM2	= 2	; 
                                 .equ	FNUM3	= 3	; 
                                 .equ	FNUM4	= 4	; 
                                 .equ	FNUM5	= 5	; 
                                 .equ	FNUM6	= 6	; 
                                 .equ	FNUM7	= 7	; 
                                 
                                 ; UDFNUMH - 
                                 .equ	FNUM8	= 0	; 
                                 .equ	FNUM9	= 1	; 
                                 .equ	FNUM10	= 2	; 
                                 
                                 ; UDMFN - 
                                 .equ	FNCERR	= 4	; 
                                 
                                 ; UEINTX - 
                                 .equ	TXINI	= 0	; 
                                 .equ	STALLEDI	= 1	; 
                                 .equ	RXOUTI	= 2	; 
                                 .equ	RXSTPI	= 3	; 
                                 .equ	NAKOUTI	= 4	; 
                                 .equ	RWAL	= 5	; 
                                 .equ	NAKINI	= 6	; 
                                 .equ	FIFOCON	= 7	; 
                                 
                                 ; UENUM - 
                                 .equ	UENUM_0	= 0	; 
                                 .equ	UENUM_1	= 1	; 
                                 .equ	UENUM_2	= 2	; 
                                 
                                 ; UERST - 
                                 .equ	EPRST0	= 0	; 
                                 .equ	EPRST1	= 1	; 
                                 .equ	EPRST2	= 2	; 
                                 .equ	EPRST3	= 3	; 
                                 .equ	EPRST4	= 4	; 
                                 .equ	EPRST5	= 5	; 
                                 .equ	EPRST6	= 6	; 
                                 
                                 ; UECONX - 
                                 .equ	EPEN	= 0	; 
                                 .equ	RSTDT	= 3	; 
                                 .equ	STALLRQC	= 4	; 
                                 .equ	STALLRQ	= 5	; 
                                 
                                 ; UECFG0X - 
                                 .equ	EPDIR	= 0	; 
                                 .equ	EPTYPE0	= 6	; 
                                 .equ	EPTYPE1	= 7	; 
                                 
                                 ; UECFG1X - 
                                 .equ	ALLOC	= 1	; 
                                 .equ	EPBK0	= 2	; 
                                 .equ	EPBK1	= 3	; 
                                 .equ	EPSIZE0	= 4	; 
                                 .equ	EPSIZE1	= 5	; 
                                 .equ	EPSIZE2	= 6	; 
                                 
                                 ; UESTA0X - 
                                 .equ	NBUSYBK0	= 0	; 
                                 .equ	NBUSYBK1	= 1	; 
                                 .equ	DTSEQ0	= 2	; 
                                 .equ	DTSEQ1	= 3	; 
                                 .equ	UNDERFI	= 5	; 
                                 .equ	OVERFI	= 6	; 
                                 .equ	CFGOK	= 7	; 
                                 
                                 ; UESTA1X - 
                                 .equ	CURRBK0	= 0	; 
                                 .equ	CURRBK1	= 1	; 
                                 .equ	CTRLDIR	= 2	; 
                                 
                                 ; UEIENX - 
                                 .equ	TXINE	= 0	; 
                                 .equ	STALLEDE	= 1	; 
                                 .equ	RXOUTE	= 2	; 
                                 .equ	RXSTPE	= 3	; 
                                 .equ	NAKOUTE	= 4	; 
                                 .equ	NAKINE	= 6	; 
                                 .equ	FLERRE	= 7	; 
                                 
                                 ; UEDATX - 
                                 .equ	DAT0	= 0	; 
                                 .equ	DAT1	= 1	; 
                                 .equ	DAT2	= 2	; 
                                 .equ	DAT3	= 3	; 
                                 .equ	DAT4	= 4	; 
                                 .equ	DAT5	= 5	; 
                                 .equ	DAT6	= 6	; 
                                 .equ	DAT7	= 7	; 
                                 
                                 ; UEBCLX - 
                                 .equ	BYCT0	= 0	; 
                                 .equ	BYCT1	= 1	; 
                                 .equ	BYCT2	= 2	; 
                                 .equ	BYCT3	= 3	; 
                                 .equ	BYCT4	= 4	; 
                                 .equ	BYCT5	= 5	; 
                                 .equ	BYCT6	= 6	; 
                                 .equ	BYCT7	= 7	; 
                                 
                                 ; UEINT - 
                                 .equ	EPINT0	= 0	; 
                                 .equ	EPINT1	= 1	; 
                                 .equ	EPINT2	= 2	; 
                                 .equ	EPINT3	= 3	; 
                                 .equ	EPINT4	= 4	; 
                                 .equ	EPINT5	= 5	; 
                                 .equ	EPINT6	= 6	; 
                                 
                                 ; USBINT - 
                                 .equ	VBUSTI	= 0	; 
                                 
                                 ; USBSTA - 
                                 .equ	VBUS	= 0	; 
                                 .equ	SPEED	= 3	; 
                                 
                                 ; USBCON - USB General Control Register
                                 ;.equ	VBUSTE	= 0	; 
                                 ;.equ	OTGPADE	= 4	; 
                                 ;.equ	FRZCLK	= 5	; 
                                 ;.equ	USBE	= 7	; 
                                 
                                 ; UHWCON - 
                                 .equ	UVREGE	= 0	; 
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Oscillator options
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 .equ	HWBE	= 3	; Hardware Boot Enable
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2560
                                 .equ	RAMEND	= 0x0aff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2560
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	Reserved1addr	= 0x000a	; Reserved1
                                 .equ	Reserved2addr	= 0x000c	; Reserved2
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	Reserved3addr	= 0x0010	; Reserved3
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	USB_GENaddr	= 0x0014	; USB General Interrupt Request
                                 .equ	USB_COMaddr	= 0x0016	; USB Endpoint/Pipe Interrupt Communication Request
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	Reserved4addr	= 0x001a	; Reserved4
                                 .equ	Reserved5addr	= 0x001c	; Reserved5
                                 .equ	Reserved6addr	= 0x001e	; Reserved6
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC1addr	= 0x0032	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x0034	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x0036	; USART1, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	TWIaddr	= 0x0048	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x004a	; Store Program Memory Read
                                 .equ	OC4Aaddr	= 0x004c	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x004e	; Timer/Counter4 Compare Match B
                                 .equ	OC4Daddr	= 0x0050	; Timer/Counter4 Compare Match D
                                 .equ	OVF4addr	= 0x0052	; Timer/Counter4 Overflow
                                 .equ	TIMER4_FPFaddr	= 0x0054	; Timer/Counter4 Fault Protection Interrupt
                                 
                                 .equ	INT_VECTORS_SIZE	= 86	; size in words
                                 
                                 #endif  /* _M32U4DEF_INC_ */
                                 
                                 
                                 ;***********************************************************
                                 ;*
                                 ;*	This is the TRANSMIT skeleton file for Lab 7 of ECE 375
                                 ;*
                                 ;*  	Rock Paper Scissors
                                 ;* 	Requirement:
                                 ;* 	1. USART1 communication
                                 ;* 	2. Timer/counter1 Normal mode to create a 1.5-sec delay
                                 ;***********************************************************
                                 ;*
                                 ;*	 Author: William Richards, Caden Hawkins
                                 ;*	   Date: 11/16/2022
                                 ;*
                                 ;***********************************************************
                                 
                                 .include "m32U4def.inc"         ; Include definition file
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32U4.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32U4def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32U4
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32U4
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32U4DEF_INC_
                                 #endif  /* _M32U4DEF_INC_ */
                                 
                                 
                                 ;***********************************************************
                                 ;*  Internal Register Definitions and Constants
                                 ;***********************************************************
                                 .def    mpr = r16               ; Multi-Purpose Register
                                 .def	loop_count = r17		; Timer counter loops
                                 .def	transmit_byte = r18		; Byte that will be transmitted
                                 .def	recv_byte = r19			; Byte that will be received by the device
                                 .def	user_ready = r13		; Reg indicate user ready (1 - ready, 0 - not)
                                 .def	opp_ready = r14			; Reg indicated opp ready (1 - ready, 0 - not)
                                 .def	opp_move = r15			; Store opponent move
                                 .def	game_state = r12		; State of the current game
                                 
                                 ; Game State --------------------------------------------------
                                 ; Held on both devices and different numbers are equivelent 
                                 ; to different states
                                 
                                 ; 0x00 - Welcome message
                                 ; 0x01 - Waiting for opponent
                                 ; 0x02 - Game Start
                                 ; 0x03 - End Game
                                 ; -------------------------------------------------------------
                                 
                                 .def	item_selection = r24	; What item we select to use
                                 
                                 ; Item Selection ----------------------------------------------
                                 ; Equivalent values for each move
                                 
                                 ; 0x01 - Rock
                                 ; 0x02 - Paper
                                 ; 0x03 - Scissors
                                 ; -------------------------------------------------------------
                                 
                                 ; Use this signal code between two boards for their game ready
                                 .equ    SendReady = 0xFF
                                 
                                 ;***********************************************************
                                 ;*  Start of Code Segment
                                 ;***********************************************************
                                 .cseg                           ; Beginning of code segment
                                 
                                 ;***********************************************************
                                 ;*  Interrupt Vectors
                                 ;***********************************************************
                                 .org    $0000						; Beginning of IVs
000000 c055                      	    rjmp    INIT            	; Reset interrupt
                                 
                                 		; Interrupt 0 (PD7 send ready signal to opponent)
                                 .org	$0002
000002 d10e                      		rcall SEND_READY
000003 9518                      		reti
                                 
                                 ; Interrupt 1 (PD4 select move to send to opponent)
                                 .org	$0004
000004 d117                      		rcall CYCLE_SELCTION
000005 9518                      		reti
                                 
                                 ; Triggered whenever data is received on UART
                                 .org	$0032
000032 d0ce                      		rcall RECEIVE
000033 9518                      		reti
                                 
                                 ; Triggered when the data register is empty
                                 ; We may not want to transmit every time
                                 ;.org	$0034
                                 ;		rcall TRANSMIT
                                 ;		reti
                                 
                                 .org    $0056						; End of Interrupt Vectors
                                 
                                 ;***********************************************************
                                 ;*  Program Initialization
                                 ;***********************************************************
                                 
                                 INIT:
                                 
                                 ; Stack Pointer ---------------------------------------------
000056 ef0f                      	ldi mpr, LOW(RAMEND)
000057 bf0d                      	out SPL, mpr
000058 e00a                      	ldi mpr, HIGH(RAMEND)
000059 bf0e                      	out SPH, mpr
                                 ; -----------------------------------------------------------
                                 
                                 ; I/O Ports -------------------------------------------------
                                 
                                 	; Enable Port B (LEDS)
00005a ef0f                      	ldi		mpr, $FF		; Set Port B Data Direction Register
00005b b904                      	out		DDRB, mpr		; for output
00005c e000                      	ldi		mpr, $00		; Initialize Port B Data Register
00005d b905                      	out		PORTB, mpr		; so all Port B outputs are low
                                 
                                 	; Enable Port D (Buttons)
00005e e000                      	ldi		mpr, $00		; Set Port D Data Direction Register
00005f b90a                      	out		DDRD, mpr		; for input
000060 ef0f                      	ldi		mpr, $FF		; Initialize Port D Data Register
000061 b90b                      	out		PORTD, mpr		; so all Port D inputs are Tri-State
                                 ; -------------------------------------------------------------
                                 
                                 ; Configure Interrupts ----------------------------------------
                                 	
                                 	; Only enable interrupt 0 at first so interrupt 1 can't 
                                 	; be used until users are both ready
                                 
                                 	; Set interrupt 0 and 1 to trigger on a falling edge
000062 e00a                      	ldi mpr, 0b00001010
000063 9300 0069                 	sts EICRA, mpr
                                 
                                 	; Configure the External Interrupt Mask
000065 e001                      	ldi mpr, 0b00000001
000066 bb0d                      	out EIMSK, mpr
                                 ; -------------------------------------------------------------
                                 
                                 ; USART1 ------------------------------------------------------
                                 	
                                 	;Set baudrate at 2400bps (207 UBRR)
000067 e001                      	ldi mpr, high(416)
000068 9300 00cd                 	sts UBRR1H, mpr
00006a ea00                      	ldi mpr, low(416)
00006b 9300 00cc                 	sts UBRR1L, mpr
                                 
                                 	;Set frame format: 8 data bits, 2 stop bits
00006d e00e                      	ldi mpr, (1<<USBS1 | 1<<UCSZ11 | 1<<UCSZ10)
00006e 9300 00ca                 	sts UCSR1C, mpr
                                 
                                 	;Enable receiver and transmitter
000070 e908                      	ldi mpr, (1<<TXEN1 | 1<<RXEN1 | 1<<RXCIE1)
000071 9300 00c9                 	sts UCSR1B, mpr
                                 
                                 ; -------------------------------------------------------------
                                 
                                 ; TIMER/COUNTER1 ----------------------------------------------
                                 
                                 	;Set Normal mode
000073 e000                      	ldi mpr, 0b00000000
000074 9300 0080                 	sts TCCR1A, mpr
                                 
                                 	; Prescale of 1024
000076 e005                      	ldi mpr, 0b00000101
000077 9300 0081                 	sts TCCR1B, mpr
                                 ; -------------------------------------------------------------	
                                 
                                 ; LCD ---------------------------------------------------------
                                 	
                                 	;Initialize LCD Display
000079 d0ea                      	rcall LCDInit
00007a d128                      	rcall LCDClr
00007b d10a                      	rcall LCDBacklightOn
                                 
                                 	; Print the welcome message to the screen
00007c 940e 0a80                 	call LOAD_WELCOME_MSG
                                 
                                 	; Write the welcome message to the LCD 
00007e d10b                      	rcall LCDWrite
                                 ; -------------------------------------------------------------
                                 
                                 ; Initial Register & Flag State -------------------------------
                                 	
                                 	; Clear registers that need to have a known initial state
00007f 2711                      	clr loop_count
                                 
                                 	; Start at zero but the numbers actually start at one so the 
                                 	; first time we call it prints rock
000080 2788                      	clr item_selection
                                 
                                 	; By clearing this, the state is set to 0x00 meaning the 
                                 	; welcome message should print in the main
000081 24cc                      	clr game_state
                                 
                                 	; Clearing this indicates both players aren't ready
000082 24dd                      	clr user_ready
000083 24ee                      	clr opp_ready
                                 
                                 	; Globally enable interrupts
000084 9478                      	sei
                                 ; -------------------------------------------------------------
                                 
                                 
                                 ;***********************************************************
                                 ;*  Main Program (Print the welcome message until PD7 pressed)
                                 ;***********************************************************
                                 MAIN:
000085 e002                      	ldi mpr, 0x02
000086 16c0                      	cp game_state, mpr
000087 f009                      	breq GAME
                                 		
000088 cffc                      	rjmp	MAIN
                                 
                                 ;***********************************************************
                                 ;*	Functions and Subroutines
                                 ;***********************************************************
                                 
                                 ; Game control ---------------------------------------------
                                 
                                 
                                 ;***********************************************************
                                 ;*	Run the game
                                 ;***********************************************************
                                 GAME:
                                 
                                 	; Print the GAME START message with rock as default move
000089 940e 0a89                 	call LOAD_START_MSG
00008b d0fe                      	rcall LCDWrite
                                 
                                 	; Clear both of these so the tran/recv functions won't
                                 	; restart the game unintentionally
00008c 24dd                      	clr user_ready
00008d 24ee                      	clr opp_ready
00008e d08d                      	rcall CYCLE_SELCTION
                                 
                                 	; Start the 6 second timer for the move selection process
                                 	; This routine will proceed until interrupted by PD4 (int 1)
                                 	; that should be enabled at this point. Once the timer is
                                 	; complete, this will return
00008f d0c0                      	rcall WAIT_SIX_SECONDS
                                 
                                 	; Set the UDRE1 bit in the UCSR1A so transmit is allowed 
                                 	; via our busy wait function. To send the user move
000090 9100 00c8                 	lds mpr, UCSR1A
000092 6005                      	sbr mpr, UDRE1
000093 9300 00c8                 	sts UCSR1A, mpr
                                 
                                 	; Move the user move into the transmit buffer, then transmit
000095 2f28                      	mov transmit_byte, item_selection
000096 d05b                      	rcall TRANSMIT
                                 
000097 d043                      	rcall DISPLAY_OPP_MOVE
                                 
000098 d0b7                      	rcall WAIT_SIX_SECONDS
                                 
                                 	; Intentional lack of ret here so it moves to the END_GAME
                                 	; after the count down is finished
                                 
                                 ;***********************************************************
                                 ;*	Run the end of game procedures
                                 ;***********************************************************
                                 END_GAME:
                                 	; set game state to end game
000099 e003                      	ldi mpr, 0x03
00009a 2ec0                      	mov game_state, mpr
                                 
                                 	; Result Decision and display ------------------------------
                                 	
00009b 3081                      	cpi item_selection, 0x01
00009c f091                      	breq USER_ROCK
                                 
00009d 3082                      	cpi item_selection, 0x02
00009e f0d1                      	breq USER_PAPER
                                 
00009f 3083                      	cpi item_selection, 0x03
0000a0 f111                      	breq USER_SCISSORS
                                 	; ----------------------------------------------------------
                                 
                                 	; Reset state of game --------------------------------------
                                 	
                                 	; Configure the External Interrupt Mask for int 0 only
0000a1 e001                      	ldi mpr, 0b00000001
0000a2 bb0d                      	out EIMSK, mpr
                                 
                                 	; clear display
0000a3 d0ff                      	rcall LCDClr
                                 
                                 	; set game mode to welcome message
0000a4 e000                      	ldi mpr, 0x00
0000a5 2ec0                      	mov game_state, mpr
                                 
                                 	; Print the welcome message to the screen
0000a6 940e 0a80                 	call LOAD_WELCOME_MSG
                                 
                                 	; Write the welcome message to the LCD 
0000a8 d0e1                      	rcall LCDWrite
                                 
                                 	; Clear registers that need to have a known initial state
0000a9 2711                      	clr loop_count
                                 
                                 	; Start at zero but the numbers actually start at one so the 
                                 	; first time we call it prints rock
0000aa 2788                      	clr item_selection
                                 
                                 	; By clearing this, the state is set to 0x00 meaning the 
                                 	; welcome message should print in the main
0000ab 24cc                      	clr game_state
                                 
                                 	; Clearing this indicates both players aren't ready
0000ac 24dd                      	clr user_ready
0000ad 24ee                      	clr opp_ready
                                 	; ----------------------------------------------------------
                                 
0000ae 9508                      	ret
                                 
                                 ; ------------------------------------------------------------
                                 
                                 ; Handle Moves -----------------------------------------------
                                 
                                 ;***********************************************************
                                 ;*	User played rock
                                 ;***********************************************************
                                 USER_ROCK:
                                 	
                                 	; opponent chose rock - tie
0000af e001                      	ldi mpr, 0x01
0000b0 16f0                      	cp opp_move, mpr
0000b1 f129                      	breq TIE
                                 
                                 	; opponent chose paper - loss
0000b2 e002                      	ldi mpr, 0x02
0000b3 16f0                      	cp opp_move, mpr
0000b4 f0f1                      	breq LOSS
                                 
                                 	; opponent chose scissors - win
0000b5 e003                      	ldi mpr, 0x03
0000b6 16f0                      	cp opp_move, mpr
0000b7 f0b9                      	breq WIN
                                 
0000b8 9508                      	ret
                                 
                                 ;***********************************************************
                                 ;*	User played paper
                                 ;***********************************************************
                                 USER_PAPER:
                                 	
                                 	; opponent chose rock - win
0000b9 e001                      	ldi mpr, 0x01
0000ba 16f0                      	cp opp_move, mpr
0000bb f099                      	breq WIN
                                 
                                 	; opponent chose paper - tie
0000bc e002                      	ldi mpr, 0x02
0000bd 16f0                      	cp opp_move, mpr
0000be f0c1                      	breq TIE
                                 
                                 	; opponent chose scissors - loss
0000bf e003                      	ldi mpr, 0x03
0000c0 16f0                      	cp opp_move, mpr
0000c1 f089                      	breq LOSS
                                 
0000c2 9508                      	ret
                                 
                                 ;***********************************************************
                                 ;*	User played scissors
                                 ;***********************************************************
                                 USER_SCISSORS:
                                 	
                                 	; opponent chose rock - loss
0000c3 e001                      	ldi mpr, 0x01
0000c4 16f0                      	cp opp_move, mpr
0000c5 f069                      	breq LOSS
0000c6 9508                      	ret
                                 
                                 	; opponent chose paper - win
0000c7 e002                      	ldi mpr, 0x02
0000c8 16f0                      	cp opp_move, mpr
0000c9 f029                      	breq WIN
0000ca 9508                      	ret
                                 
                                 	; opponent chose scissors - tie
0000cb e003                      	ldi mpr, 0x03
0000cc 16f0                      	cp opp_move, mpr
0000cd f049                      	breq TIE
0000ce 9508                      	ret
                                 
                                 ;***********************************************************
                                 ;*	User won the round
                                 ;***********************************************************
                                 WIN:
0000cf 940e 0a9b                 	call LOAD_WIN_MSG
0000d1 d0c6                      	rcall LCDWrLn2
0000d2 9508                      	ret
                                 
                                 ;***********************************************************
                                 ;*	User lost the round
                                 ;***********************************************************
                                 LOSS:
0000d3 940e 0aa4                 	call LOAD_LOSS_MSG
0000d5 d0c2                      	rcall LCDWrLn2
0000d6 9508                      	ret
                                 
                                 ;***********************************************************
                                 ;*	User tied with opponenet
                                 ;***********************************************************
                                 TIE:
0000d7 940e 0aad                 	call LOAD_DRAW_MSG
0000d9 d0be                      	rcall LCDWrLn2
0000da 9508                      	ret
                                 
                                 	
                                 ;***********************************************************
                                 ;*	Run the end of game procedures
                                 ;***********************************************************
                                 DISPLAY_OPP_MOVE:
0000db 2ef3                      	mov opp_move, recv_byte
                                 
0000dc e001                      	ldi mpr, 0x01
0000dd 16f0                      	cp opp_move, mpr
0000de f031                      	breq OPP_ROCK
                                 
0000df e002                      	ldi mpr, 0x02
0000e0 16f0                      	cp opp_move, mpr
0000e1 f039                      	breq OPP_PAPER
                                 
0000e2 e003                      	ldi mpr, 0x03
0000e3 16f0                      	cp opp_move, mpr
0000e4 f041                      	breq OPP_SCISSORS
                                 
                                 	OPP_ROCK:
0000e5 940e 0ad1                 		call LOAD_TOP_ROCK_MSG
0000e7 d0b0                      		rcall LCDWrLn2
0000e8 9508                      		ret
                                 	OPP_PAPER:
0000e9 940e 0ada                 		call LOAD_TOP_PAPER_MSG
0000eb d0ac                      		rcall LCDWrLn2
0000ec 9508                      		ret
                                 	OPP_SCISSORS:
0000ed 940e 0ae3                 		call LOAD_TOP_SCISSORS_MSG
0000ef d0a8                      		rcall LCDWrLn2
0000f0 9508                      		ret
0000f1 9508                      	ret
                                 
                                 ; ----------------------------------------------------------
                                 
                                 ; Communication Subroutines --------------------------------
                                 
                                 ;***********************************************************
                                 ;*	Transmit the data that is currently in the transmit_byte
                                 ;***********************************************************
                                 TRANSMIT:
                                 
                                 	; Read all data from UDR1
0000f2 9100 00c8                 	lds mpr, UCSR1A
0000f4 ff05                      	sbrs mpr, UDRE1
0000f5 cffc                      	rjmp TRANSMIT
                                 
                                 	; Send byte
0000f6 9320 00ce                 	sts UDR1, transmit_byte
                                 
                                 	SET_USER_READY:
0000f8 e001                      		ldi mpr, 0x01
0000f9 2ed0                      		mov user_ready, mpr
                                 
                                 		; If the opp is ready begin the game, set game state
                                 		; and enable move select interrupt PD4, otherwise end the routine
0000fa fee1                      		sbrs opp_ready, 0x01
0000fb c004                      		rjmp END_TRANSMIT
0000fc e002                      		ldi mpr, 0x02
0000fd 2ec0                      		mov game_state, mpr
                                 
                                 		; Now enable PD4 (int 1) for move selection 
0000fe e002                      		ldi mpr, 0b00000010
0000ff bb0d                      		out EIMSK, mpr
                                 	
                                 	END_TRANSMIT:
                                 
000100 9508                      	ret
                                 
                                 ;***********************************************************
                                 ;*	Read whatever data is waiting into the recv_byte
                                 ;***********************************************************
                                 RECEIVE:
000101 9130 00ce                 	lds recv_byte, UDR1
                                 
                                 	; If the message was the ready signal from opp handle that
000103 3f3f                      	cpi recv_byte, 0xFF
000104 f011                      	breq SET_OPPONENT_READY
                                 
                                 	; Otherwise just end the routine (ensure game won't restart)
000105 940c 0110                 	jmp END_RECEIVE
                                 
                                 	SET_OPPONENT_READY:
                                 		; Set opp ready to indicate opponent is ready
000107 e001                      		ldi mpr, 0x01
000108 2ee0                      		mov opp_ready, mpr
                                 
                                 		; If the user is ready begin the game, set game state
                                 		; and enable move select interrupt PD4, otherwise end the routine
000109 fed1                      		sbrs user_ready, 0x01
00010a 940c 0110                 		jmp END_RECEIVE
00010c e002                      		ldi mpr, 0x02
00010d 2ec0                      		mov game_state, mpr
                                 
                                 		; Now enable PD4 (int 1) for move selection 
00010e e003                      		ldi mpr, 0b00000011
00010f bb0d                      		out EIMSK, mpr
                                 	
                                 	END_RECEIVE:
                                 
000110 9508                      	ret
                                 
                                 ; ---------------------------------------------------------
                                 
                                 ; Interrupt Subroutines -----------------------------------
                                 
                                 ;***********************************************************
                                 ;*	Transmit the data that is currently in the transmit_byte
                                 ;***********************************************************
                                 SEND_READY:
                                 	; Clear queued interrupts
000111 e001                      	ldi mpr, 0b00000001
000112 bb0c                      	out EIFR, mpr
                                 
                                 	; Set game state to waiting for opponent and display on LCD
000113 e001                      	ldi mpr, 0x01
000114 2ec0                      	mov game_state, mpr
000115 940e 0a92                 	call LOAD_WAITING_MSG
000117 d072                      	rcall LCDWrite
                                 
                                 	; Load the Ready signal into the transmit buffer, then transmit
000118 ef0f                      	ldi mpr, SendReady
000119 2f20                      	mov transmit_byte, mpr
00011a dfd7                      	rcall TRANSMIT
                                 
00011b 9508                      	ret
                                 
                                 ;***********************************************************
                                 ;*	Switch between each of the possible items we can use
                                 ;***********************************************************
                                 CYCLE_SELCTION:
                                 	; Increment item_selection by one
00011c 9583                      	inc item_selection
                                 
00011d 3081                      	cpi item_selection, 0x01
00011e f021                      	breq ROCK
                                 
00011f 3082                      	cpi item_selection, 0x02
000120 f041                      	breq PAPER
                                 
000121 3083                      	cpi item_selection, 0x03
000122 f061                      	breq SCISSORS
                                 
                                 	ROCK:
000123 940e 0ab6                 		call LOAD_ROCK_MSG
000125 d072                      		rcall LCDWrLn2
                                 		; Clear queued interrupts
000126 e001                      		ldi mpr, 0b00000001
000127 bb0c                      		out EIFR, mpr
000128 9508                      		ret
                                 
                                 	PAPER:
000129 940e 0abf                 		call LOAD_PAPER_MSG
00012b d06c                      		rcall LCDWrLn2
                                 		; Clear queued interrupts
00012c e001                      		ldi mpr, 0b00000001
00012d bb0c                      		out EIFR, mpr
00012e 9508                      		ret
                                 
                                 	SCISSORS:
00012f 940e 0ac8                 		call LOAD_SCISSORS_MSG
000131 d066                      		rcall LCDWrLn2
000132 e080                      		ldi item_selection, 0x00
                                 		; Clear queued interrupts
000133 e001                      		ldi mpr, 0b00000001
000134 bb0c                      		out EIFR, mpr
000135 9508                      		ret
                                 
                                 ; ---------------------------------------------------------
                                 
                                 ; Wait subroutines ----------------------------------------
                                 
                                 ;***********************************************************
                                 ;*	Wait for One and a Half seconds before returning
                                 ;***********************************************************
                                 WAIT_ONE_HALF_SECOND:
000136 930f                      	push mpr
000137 b70f                      	in mpr, SREG
000138 930f                      	push mpr
000139 931f                      	push loop_count
                                 
                                 	; Set number of loops to 3
00013a e013                      	ldi loop_count, 3
00013b e00f                      	ldi mpr, 0b00001111
00013c b905                      	out PORTB, mpr
                                 
                                 
                                 	WAIT_HALF_SECOND:
                                 		; Offset from max to get the right delay
00013d e805                      		ldi mpr, 0x85
00013e 9300 0085                 		sts TCNT1H, mpr
000140 ee0d                      		ldi mpr, 0xED
000141 9300 0084                 		sts TCNT1L, mpr
                                 
                                 		; Check if we are done counting yet
                                 		WAIT_LOOP:
000143 b306                      			in mpr, TIFR1
000144 7001                      			ANDI mpr, 0b00000001
000145 f7e9                      			brne WAIT_LOOP
                                 	
                                 		; Clear Flag
000146 e001                      		ldi mpr, 0b00000001
000147 bb06                      		out TIFR1, mpr
                                 
000148 951a                      		dec loop_count
                                 
                                 	; Check if we need to break out of the loop
000149 3010                      	cpi loop_count, 0x00
00014a f791                      	brne WAIT_HALF_SECOND
                                 
00014b 911f                      	pop loop_count
00014c 910f                      	pop mpr
00014d bf0f                      	out SREG, mpr
00014e 910f                      	pop mpr
00014f 9508                      	ret
                                 
                                 ;***********************************************************
                                 ;*	Wait for One and a Half seconds before returning
                                 ;***********************************************************
                                 WAIT_SIX_SECONDS:
000150 930f                      	push mpr
000151 b70f                      	in mpr, SREG
000152 930f                      	push mpr
000153 931f                      	push loop_count
                                 
                                 	; Set counter to use 1.5 second timer 4 times (6 seconds)
000154 e014                      	ldi loop_count, 4
                                 
                                 	; Set the top four bits of PORTB to 1111 for the timer display
                                 	; Each 1.5 second, cycle one bit is removed
000155 ef00                      	ldi mpr, 0xF0
000156 b905                      	out PORTB, mpr
                                 
                                 	ONE_CYCLE:
000157 dfde                      		rcall WAIT_ONE_HALF_SECOND
                                 
                                 		; Take the four bits of PORTB shift right 
                                 		; (ex: 01110000 -> 00111000) then and with 0xF0
                                 		; to remove lower byte 1 that was shifted, put back out to PORTB
000158 b105                      		in mpr, PORTB
000159 9506                      		lsr mpr
00015a 7f00                      		andi mpr, 0xF0
00015b b905                      		out PORTB, mpr
                                 
00015c 951a                      		dec loop_count
                                 
                                 		; if the timer is complete we want to move forward with the program
00015d 3010                      		cpi loop_count, 0x00
00015e f7c1                      		brne ONE_CYCLE
                                 
00015f 911f                      	pop loop_count
000160 910f                      	pop mpr
000161 bf0f                      	out SREG, mpr
000162 910f                      	pop mpr
000163 9508                      	ret
                                 
                                 ; ----------------------------------------------------------
                                 
                                 ;***********************************************************
                                 ;*	Additional Program Includes
                                 ;***********************************************************
                                 .include "LCDDriver.asm"		; Include the LCD Driver
                                 
                                 ;*	Oregon State University
                                 ;*	ST7565R LCD Driver
                                 ;*	This code configures the graphical LCD and emulates
                                 ;*	the behavior of a 2x16 character display.
                                 ;*
                                 ;*	The LCD has room for 32 characters in total
                                 ;*	(16 on the top and 16 on the bottom).
                                 ;*	The upper 16 characters should be located in SRAM starting at 0x0100.
                                 ;*	The lower 16 characters should be located in SRAM starting at 0x0110.
                                 ;*
                                 ;*	NOTE: Register r16 MUST be named 'mpr' in the Main Code
                                 ;*	Something like this:
                                 ;*	.def	mpr = r16
                                 ;*
                                 ;*	WARNING: Register r20-r22 are reserved and cannot be
                                 ;*		renamed outside of the LCD Driver functions. Doing
                                 ;*		so will damage the functionality of the LCD Driver
                                 ;*
                                 ;*	Acknowledgements: the Bin2ASCII and div10 procedures were written by
                                 ;*	David Zier for a previous board. The code has been retained intact.
                                 ;*
                                 ;*********************************************************************
                                 ;*	Rev	Date		Name			Description
                                 ;*--------------------------------------------------------------------
                                 ;*	-	8/18/22	Justin Goins	Version 1.0
                                 ;*
                                 ;*
                                 ;*********************************************************************
                                 
                                 .include "m32U4def.inc"				; Include definition file
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32U4.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32U4def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32U4
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32U4
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32U4DEF_INC_
                                 #endif  /* _M32U4DEF_INC_ */
                                 
                                 
                                 ; Register definitions
                                 .def	count = r20			; Character Counter
                                 .def	q = r21			; Quotient for div10
                                 .def	r = r22			; Remander for div10
                                 
                                 ; The following constants are not intended to be modified.
                                 .equ	lcd_buffer_addr = 0x0100 ; define the SRAM base address of the LCD buffer
                                 
                                 ; This information is gathered from the ST7565R datasheet.
                                 ; define some command patterns
                                 .equ	lcd_c_disp_en = 0b10101110 ; lsb indicates whether the LCD is on (1) or off (0)
                                 .equ	lcd_c_disp_set_start_ln = 0b01000000 ; lower 6 bits indicate the line index (0 - 63)
                                 .equ	lcd_c_disp_set_page_addr = 0b10110000 ; lower 4 bits indicate the page address (page 3 is at top and page 0 is at bottom)
                                 ; together, these commands allow you to specify a column index from (0 - 131):
                                 .equ	lcd_c_disp_set_col_addr_h = 0b00010000 ; lower 4 bits indicate the 4 high bits of the column address
                                 .equ	lcd_c_disp_set_col_addr_l = 0b00000000 ; lower 4 bits indicate the 4 low bits of the column address
                                 .equ	lcd_c_disp_set_invert = 0b10100110 ; lsb indicates whether the LCD is normal (0) or inverted (1)
                                 .equ	lcd_c_disp_fill = 0b10100100 ; lsb indicates whether the LCD is normal (0) or filled with dots (1)
                                 .equ	lcd_c_disp_reset = 0b11100010 ; resets the line/page addresses and other stuff, does not affect data RAM
                                 .equ	lcd_c_disp_set_bias = 0xA2 ; 1/6 bias (in 1/33 duty mode)
                                 .equ	lcd_c_disp_set_scandir = 0b11000000 ; select normal scan direction (most significant bit is placed at top of LCD)
                                 .equ	lcd_c_disp_set_contrast_1 = 0b10000001 ; first we send this command then we pass the value
                                 .equ	lcd_c_disp_set_contrast_2 = 15 ; can select a contrast value between 1 and 63
                                 .equ	lcd_c_disp_set_res_ratio = 0x22 ; see the datasheet
                                 .equ	lcd_c_disp_vreg_on = 0x2F ; enable voltage booster, voltage regulator, and voltage follower
                                 
                                 ; use this command to write into the LCD RAM:
                                 .equ	lcd_c_disp_write = 0b00000000 ; these 8 bits are the data to be placed in the target. 
                                 ; note that the column address is automatically incremented by 1 after each write to the LCD data
                                 
                                 ; everything in this driver file needs to go into the code segment
                                 .cseg
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDInit
                                 ;* Desc:	This function initializes the LCD control pins and
                                 ;*		sets reasonable values for the configuration registers.
                                 ;*****************************************************************
                                 LCDInit:
000164 930f                      	push	mpr
                                 
                                 	; set MOSI, SCL, and SS as outputs
000165 9a22                      	sbi	DDRB, DDB2	; Port B 2
000166 9a21                      	sbi	DDRB, DDB1	; Port B 1
000167 9a20                      	sbi	DDRB, DDB0	; Port B 0
                                 	; ensure that SS is deactivated (active low)
000168 9a28                      	sbi	PORTB, 0
                                 	; set lcd_A0 as output
000169 9a81                      	sbi	DDRF, DDF1	; Port F 1
                                 	; enable LCD backlight control
00016a 9a3f                      	sbi	DDRC, DDC7	; Port C 7
                                 	; set lcd_RST_N as output
00016b 9a80                      	sbi	DDRF, DDF0	; Port F 0
                                 	; we pull lcd_RST_N low for 1 millisecond
00016c 9888                      	cbi	PORTF, 0
00016d 940e 024f                 	call	LCDDelay
00016f 9a88                      	sbi	PORTF, 0
                                 	; Enable SPI mode 3, master configuration, set clock rate fck/2 using SPI2X
000170 e50c                      	ldi	mpr, (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA)
000171 bd0c                      	out	SPCR, mpr
000172 e001                      	ldi	mpr, (1<<SPI2X)
000173 bd0d                      	out	SPSR, mpr
                                 	; Note: after transmitting a byte, the SPI interrupt flag will
                                 	; be automatically cleared next time we: 1) read SPSR and ALSO 2) access SPDR
                                 
000174 9828                      	cbi	PORTB, 0	; activate slave select
                                 	; send a string of initialization commands
000175 ea02                      	ldi	mpr, lcd_c_disp_set_bias
000176 d0d2                      	rcall	LCD_Internal_WriteCMD
000177 ec00                      	ldi	mpr, lcd_c_disp_set_scandir
000178 d0d0                      	rcall	LCD_Internal_WriteCMD
000179 e801                      	ldi	mpr, lcd_c_disp_set_contrast_1
00017a d0ce                      	rcall	LCD_Internal_WriteCMD
00017b e00f                      	ldi	mpr, lcd_c_disp_set_contrast_2
00017c d0cc                      	rcall	LCD_Internal_WriteCMD
00017d e202                      	ldi	mpr, lcd_c_disp_set_res_ratio
00017e d0ca                      	rcall	LCD_Internal_WriteCMD
00017f e20f                      	ldi	mpr, lcd_c_disp_vreg_on
000180 d0c8                      	rcall	LCD_Internal_WriteCMD
000181 ea0f                      	ldi	mpr, (lcd_c_disp_en | 1 << 0)
000182 d0c6                      	rcall	LCD_Internal_WriteCMD
000183 9a28                      	sbi	PORTB, 0	; deactivate slave select
                                 
000184 910f                      	pop	mpr
000185 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDBacklightOn
                                 ;* Desc:	Enables the backlight
                                 ;*****************************************************************
                                 LCDBacklightOn:
000186 9a47                      	sbi	PORTC, 7
000187 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDBacklightOff
                                 ;* Desc:	Disables the backlight
                                 ;*****************************************************************
                                 LCDBacklightOff:
000188 9847                      	cbi	PORTC, 7
000189 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDWrite
                                 ;* Desc:	This function writes 32 characters to the LCD screen...
                                 ;*		16 chars on the top line and 16 chars on the bottom line.
                                 ;*****************************************************************
                                 LCDWrite:
00018a d002                      	rcall	LCDWrLn1
00018b d00c                      	rcall	LCDWrLn2
00018c 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDWrLn1
                                 ;* Desc:	This function writes 16 characters to the top line.
                                 ;*****************************************************************
                                 LCDWrLn1:
00018d 93bf                      	push	XH
00018e 93af                      	push	XL
00018f 931f                      	push	r17
                                 	; r17 specifies the destination bank in LCD RAM
000190 e013                      	ldi	r17, 3
                                 	; point X at the ASCII data
000191 e0b1                      	ldi	XH, HIGH(lcd_buffer_addr)
000192 e0a0                      	ldi	XL, LOW(lcd_buffer_addr)
000193 d05c                      	rcall	LCD_Internal_WriteLn
000194 911f                      	pop	r17
000195 91af                      	pop	XL
000196 91bf                      	pop	XH
000197 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDWrLn2
                                 ;* Desc:	This function writes 16 characters to the bottom line.
                                 ;*****************************************************************
                                 LCDWrLn2:
000198 93bf                      	push	XH
000199 93af                      	push	XL
00019a 931f                      	push	r17
                                 	; r17 specifies the destination bank in LCD RAM
00019b e011                      	ldi	r17, 1
                                 	; point X at the ASCII data
00019c e0b1                      	ldi	XH, HIGH(lcd_buffer_addr+16)
00019d e1a0                      	ldi	XL, LOW(lcd_buffer_addr+16)
00019e d051                      	rcall	LCD_Internal_WriteLn
00019f 911f                      	pop	r17
0001a0 91af                      	pop	XL
0001a1 91bf                      	pop	XH
0001a2 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDClr
                                 ;* Desc:	This function clears the entire LCD screen.
                                 ;*****************************************************************
                                 LCDClr:
0001a3 d022                      	rcall	LCDClrLn1
0001a4 d027                      	rcall	LCDClrLn2
                                 
0001a5 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	CLRDM1
                                 ;* Desc:	This function clears Data Memory by writing 16 
                                 ;*		consecutive ASCII spaces $20 to the memory at $0100.
                                 ;*****************************************************************
                                 CLRDM1:
                                     ; Set X register points to $0100
0001a6 93bf                      	   push	   XH
0001a7 93af                      	   PUSH	   XL
0001a8 930f                                 push    r16
0001a9 931f                                 push    r17
                                 
0001aa e0b1                                 ldi     XH, HIGH(lcd_buffer_addr)
0001ab e0a0                                 ldi     XL, LOW(lcd_buffer_addr)
0001ac e110                                 ldi     r17, 16
0001ad e200                                 ldi     r16, ' '
                                    CLRloop1:
0001ae 930d                                 st      X+, r16         ; load data to DM
0001af 951a                                 dec     r17
0001b0 f7e9                                 brne    CLRloop1
                                 
0001b1 911f                      	   pop	   r17
0001b2 910f                      	   pop	   r16
0001b3 91af                      	   pop	   XL
0001b4 91bf                      	   pop	   XH
                                 
0001b5 9508                                 ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	CLRDM2
                                 ;* Desc:	This function clears Data Memory by writing 16 
                                 ;*		consecutive ASCII spaces $20 to the memory at $0110.
                                 ;*****************************************************************
                                 CLRDM2:
                                     ; Set X register points to $0110
0001b6 93bf                      	   push	   XH
0001b7 93af                      	   PUSH	   XL
0001b8 930f                                 push    r16
0001b9 931f                                 push    r17
                                 
0001ba e0b1                                 ldi     XH, HIGH(lcd_buffer_addr+16)
0001bb e1a0                                 ldi     XL, LOW(lcd_buffer_addr+16)
0001bc e110                                 ldi     r17, 16
0001bd e200                                 ldi     r16, ' '
                                    CLRloop2:
0001be 930d                                 st      X+, r16         ; load data to DM
0001bf 951a                                 dec     r17
0001c0 f7e9                                 brne    CLRloop2
                                 
0001c1 911f                      	   pop	   r17
0001c2 910f                      	   pop	   r16
0001c3 91af                      	   pop	   XL
0001c4 91bf                      	   pop	   XH
                                 
0001c5 9508                                 ret
                                 ;*****************************************************************
                                 ;* Func:	LCDClrLn1
                                 ;* Desc:	This function clears the top line of the LCD screen.
                                 ;*****************************************************************
                                 LCDClrLn1:
0001c6 931f                      	push	r17
                                 	; r17 specifies the target bank in LCD RAM
0001c7 e013                      	ldi	r17, 3
0001c8 d060                      	rcall	LCD_Internal_ClearLn
0001c9 dfdc                      	rcall	CLRDM1
0001ca 911f                      	pop	r17
0001cb 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDClrLn2
                                 ;* Desc:	This function clears the bottom line of the LCD screen.
                                 ;*****************************************************************
                                 LCDClrLn2:
0001cc 931f                      	push	r17
                                 	; r17 specifies the target bank in LCD RAM
0001cd e011                      	ldi	r17, 1
0001ce d05a                      	rcall	LCD_Internal_ClearLn
0001cf dfe6                      	rcall	CLRDM2
0001d0 911f                      	pop	r17
0001d1 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	Bin2ASCII
                                 ;* Desc:	Converts a binary number into an ASCII 
                                 ;*			text string equivalent. 
                                 ;*			- The binary number needs to be in the mpr
                                 ;*			- The Start Address of where the text will
                                 ;*			 	be placed needs to be in the X Register
                                 ;*			- The count of the characters created are 
                                 ;*				added to the count register
                                 ;*****************************************************************
                                 Bin2ASCII:
0001d2 930f                      	push	mpr			; save mpr
0001d3 936f                      	push	r			; save r
0001d4 935f                      	push	q			; save q
0001d5 93bf                      	push	XH			; save X-pointer
0001d6 93af                      	push	XL			;
                                 
                                 	; Determine the range of mpr
0001d7 3604                      	cpi	mpr, 100		; is mpr >= 100
0001d8 f018                      	brlo	B2A_1			; goto next check
0001d9 e043                      	ldi	count, 3		; Three chars are written
0001da 9613                      	adiw	XL, 3			; Increment X 3 address spaces
0001db c007                      	rjmp	B2A_3			; Continue with program
                                 B2A_1:
0001dc 300a                      	cpi	mpr, 10		; is mpr >= 10
0001dd f018                      	brlo	B2A_2			; Continue with program
0001de e042                      	ldi	count, 2		; Two chars are written
0001df 9612                      	adiw	XL, 2			; Increment X 2 address spaces
0001e0 c002                      	rjmp	B2A_3			; Continue with program
                                 B2A_2:
0001e1 9611                      	adiw	XL, 1			; Increment X 1 address space
0001e2 e041                      	ldi	count, 1		; One char is written
                                 
                                 B2A_3:
                                 	; Do-While statement that converts Binary to ASCII
0001e3 d076                      	rcall	div10			; Call the div10 function
0001e4 e300                      	ldi	mpr, '0'		; Set the base ASCII integer value
0001e5 0f06                      	add	mpr, r		; Create the ASCII integer value
0001e6 930e                      	st	-X, mpr		; Load ASCII value to memory
0001e7 2f05                      	mov	mpr, q		; Set mpr to quotient value
0001e8 3000                      	cpi	mpr, 0		; does mpr == 0
0001e9 f7c9                      	brne	B2A_3			; do while (mpr != 0)
                                 
0001ea 91af                      	pop	XL			; restore X-pointer
0001eb 91bf                      	pop	XH			;
0001ec 915f                      	pop	q			; restore q
0001ed 916f                      	pop	r			; restore r
0001ee 910f                      	pop	mpr			; restore mpr
0001ef 9508                      	ret				; return from function
                                 
                                 ;*****************************************************************
                                 ;*	The functions below here are intended for internal use only.
                                 ;*****************************************************************
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCD_Internal_WriteLn
                                 ;* Desc:	Sends 16 characters of information to the LCD panel
                                 ;*		This is slightly more complicated than it sounds because the
                                 ;*		characters straddle two banks of the LCD memory.
                                 ;*		X is pointing at the first ASCII character to be displayed.
                                 ;*		r17 holds the index of the destination bank in LCD RAM.
                                 ;*		
                                 ;*****************************************************************
                                 LCD_Internal_WriteLn:
0001f0 920f                      	push	r0
0001f1 921f                      	push	r1
0001f2 930f                      	push	mpr
0001f3 932f                      	push	r18
0001f4 933f                      	push	r19
0001f5 938f                      	push	r24
0001f6 939f                      	push	r25
0001f7 93ef                      	push	ZL
0001f8 93ff                      	push	ZH
                                 
                                 	; r25:24 holds a pointer to the base address of the bitmap array
0001f9 e095                      	ldi	r25, HIGH(FontBitmap << 1);
0001fa e080                      	ldi	r24, LOW(FontBitmap << 1);
                                 
0001fb 9828                      	cbi	PORTB, 0	; activate slave select
                                 
                                 	; use a counter to track if we are on the top chunk or bottom chunk of each char
0001fc e022                      	ldi	r18, 2
                                 
                                 LCD_WL_display_bank:
                                 	; set the column to 0
0001fd e100                      	ldi	mpr, lcd_c_disp_set_col_addr_h
0001fe d04a                      	rcall	LCD_Internal_WriteCMD
0001ff e000                      	ldi	mpr, lcd_c_disp_set_col_addr_l
000200 d048                      	rcall	LCD_Internal_WriteCMD
                                 	; we need to select the appropriate page
000201 eb00                      	ldi	mpr, lcd_c_disp_set_page_addr
000202 2b01                      	or	mpr, r17	; set the lower 4 bits
000203 d045                      	rcall	LCD_Internal_WriteCMD
                                 
000204 e130                      	ldi	r19, 16	; there are 16 characters per line
                                 
                                 LCD_WL_next_char:
                                 	; get ascii code point & determine location of corresponding character bitmap
000205 900d                      	ld	r0, X+	; this should be a value from 0 to 255
000206 e100                      	ldi	mpr, 16	; there are 16 bytes per character
000207 9e00                      	mul	r0, mpr	; determine the byte offset for the desired char
000208 01fc                      	movw	ZH:ZL, r25:r24	; copy the base address to Z
000209 0de0                      	add	ZL, r0	; finally, compute a pointer to the char bitmap
00020a 1df1                      	adc	ZH, r1
                                 
00020b e008                      	ldi	mpr, 8	; there are 8 columns for each character
                                 
                                 	; this is where we display the chunk of character (either a top chunk or bottom chunk)
00020c 9004                      	lpm	r0, Z
                                 LCD_WL_next_col:
00020d bc0e                      	out	SPDR, r0
00020e 9a89                      	sbi	PORTF, 1	; set lcd_A0 to specify data mode
00020f 9632                      	adiw	ZH:ZL, 2	; point Z at the next column for this bank
000210 9004                      	lpm	r0, Z		; this is a sneaky way to save a few clock cycles (since we are waiting for the SPI communication)
                                 LCD_WL_wait_spi:
000211 b41d                      	in	r1, SPSR
000212 fe17                      	sbrs	r1, SPIF	; wait for SPI to finish
000213 cffd                      	rjmp	LCD_WL_wait_spi
                                 
                                 	; keep going until we have displayed all the columns for this character
000214 950a                      	dec	mpr
000215 f7b9                      	brne	LCD_WL_next_col
                                 
                                 	; move to the next character
000216 953a                      	dec	r19
000217 f769                      	brne	LCD_WL_next_char
                                 
                                 	; if we are at the end of the line, configure the bank and starting array offset for the bottom half of each char
000218 952a                      	dec	r18		; did we display both banks yet?
000219 f021                      	breq	LCD_WL_all_done
                                 	; if not, then prepare to display the bottom chunk of each character
00021a 951a                      	dec	r17		; decrement the bank number
00021b 9750                      	sbiw	XH:XL, 16	; X needs to point back at the beginning character of the line
00021c 9601                      	adiw	r25:r24, 1	; increment the base address pointer (now it will point to the second chunk of each char)
00021d cfdf                      	rjmp	LCD_WL_display_bank
                                 
                                 LCD_WL_all_done:
00021e 9a28                      	sbi	PORTB, 0	; deactivate slave select
                                 
00021f 91ff                      	pop	ZH
000220 91ef                      	pop	ZL
000221 919f                      	pop	r25
000222 918f                      	pop	r24
000223 913f                      	pop	r19
000224 912f                      	pop	r18
000225 910f                      	pop	mpr
000226 901f                      	pop	r1
000227 900f                      	pop	r0
000228 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCD_Internal_ClearLn
                                 ;* Desc:	This function clears two of the LCD memory banks.
                                 ;*		r17 specifies the starting bank to wipe.
                                 ;*****************************************************************
                                 LCD_Internal_ClearLn:
000229 930f                      	push	mpr
00022a 921f                      	push	r1
00022b 932f                      	push	r18
00022c 933f                      	push	r19
                                 
00022d 9828                      	cbi	PORTB, 0	; activate slave select
00022e e032                      	ldi	r19, 2	; we are going to clear two banks
                                 
                                 LCD_CLRLN_clear_bank:
                                 	; set the column to 0
00022f e100                      	ldi	mpr, lcd_c_disp_set_col_addr_h
000230 d018                      	rcall	LCD_Internal_WriteCMD
000231 e000                      	ldi	mpr, lcd_c_disp_set_col_addr_l
000232 d016                      	rcall	LCD_Internal_WriteCMD
                                 	; we need to select the appropriate page
000233 eb00                      	ldi	mpr, lcd_c_disp_set_page_addr
000234 2b01                      	or	mpr, r17	; configure the lower 4 bits
000235 d013                      	rcall	LCD_Internal_WriteCMD
                                 
000236 e820                      	ldi	r18, 128	; there are 128 columns on the LCD
000237 2700                      	clr	mpr		; we will fill each column with empty dots (i.e. blank space)
000238 9a89                      	sbi	PORTF, 1	; set lcd_A0 to specify data mode
                                 
                                 LCD_CLRLN_write_col:
000239 bd0e                      	out	SPDR, mpr	; send an empty column to the LCD via SPI
                                 LCD_CLRLN_wait_spi:
00023a b41d                      	in	r1, SPSR
00023b fe17                      	sbrs	r1, SPIF	; wait for SPI to finish
00023c cffd                      	rjmp	LCD_CLRLN_wait_spi
                                 
00023d 952a                      	dec	r18
00023e f7d1                      	brne	LCD_CLRLN_write_col	; cycle through all 128 columns
                                 
                                 	; clear the remaining bank if we haven't done so already
00023f 953a                      	dec	r19
000240 f011                      	breq	LCD_CLRLN_all_done
000241 951a                      	dec	r17		; decrement the bank index
000242 cfec                      	rjmp	LCD_CLRLN_clear_bank
                                 
                                 LCD_CLRLN_all_done:
000243 9a28                      	sbi	PORTB, 0	; deactivate slave select	
                                 	
                                 	; pop registers...
000244 913f                      	pop	r19
000245 912f                      	pop	r18
000246 901f                      	pop	r1
000247 910f                      	pop	mpr
000248 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCD_Internal_WriteCMD
                                 ;* Desc:	Sends the byte in mpr
                                 ;*		If you use this function directly,
                                 ;*		YOU ARE RESPONSIBLE for handling the slave select line!
                                 ;*****************************************************************
                                 LCD_Internal_WriteCMD:
000249 bd0e                      	out	SPDR, mpr	; initiate transmission
00024a 9889                      	cbi	PORTF, 1	; clear lcd_A0 to put the lcd into command mode
                                 				; (this just has to be done before the 8th bit
                                 				; is transmitted via SPI)
                                 LCD_IWC_L1:
00024b b50d                      	in	mpr, SPSR
00024c ff07                      	sbrs	mpr, SPIF	; wait for SPI to finish
00024d cffd                      	rjmp LCD_IWC_L1
00024e 9508                      	ret
                                 
                                 ;*****************************************************************
                                 ;* Func:	LCDDelay
                                 ;* Desc:	A wait loop that will consume roughly 1ms
                                 ;*		Note that a CALL takes 4 cycles on top of this delay.
                                 ;*****************************************************************
                                 LCDDelay:
00024f 930f                      	push	mpr		; 2 cycles
000250 931f                      	push	r17		; 2 cycles
000251 e01b                      	ldi	r17, 11	; 1 cycle
                                 LCDDelay_L1:
000252 ef02                      	ldi	mpr, 242	; 1 cycle
                                 LCDDelay_L2:
000253 950a                      	dec	mpr		; 1 cycle
000254 f7f1                      	brne	LCDDelay_L2	; 2 cycles on branch, 1 if no branch
000255 951a                      	dec	r17		; 1 cycle
000256 f7d9                      	brne	LCDDelay_L1	; 2 cycles on branch, 1 if no branch
000257 911f                      	pop	r17		; 2 cycles
000258 910f                      	pop	mpr		; 2 cycles
000259 9508                      	ret			; 4 cycles
                                 
                                 ;*****************************************************************
                                 ;* Func:	div10
                                 ;* Desc:	Divides the value in the mpr by 10 and 
                                 ;*			puts the remainder in the 'r' register
                                 ;*			and the quotient in the 'q' register.
                                 ;*	DO NOT modify this function, trust me, it does
                                 ;*	divide by 10 :)  ~DZ		
                                 ;*****************************************************************
                                 div10:
00025a 920f                      	push	r0		; Save register
                                 
                                 	; q = mpr / 10 = mpr * 0.000110011001101b
00025b 2f50                      	mov	q, mpr	; q = mpr * 1.0b
00025c 9556                      	lsr	q		; q >> 2
00025d 9556                      	lsr	q		; q = mpr * 0.01b
00025e 0f50                      	add	q, mpr	; q = (q + mpr) >> 1
00025f 9556                      	lsr	q		; q = mpr * 0.101b
000260 0f50                      	add	q, mpr	; q = (q + mpr) >> 3
000261 9556                      	lsr	q
000262 9556                      	lsr	q
000263 9556                      	lsr	q		; q = mpr * 0.001101b
000264 0f50                      	add	q, mpr	; q = (q + mpr) >> 1
000265 9556                      	lsr	q		; q = mpr * 0.1001101b
000266 0f50                      	add	q, mpr	; q = (q + mpr) >> 3
000267 9556                      	lsr	q				
000268 9556                      	lsr	q
000269 9556                      	lsr	q		; q = mpr * 0.0011001101b
00026a 0f50                      	add	q, mpr	; q = (q + mpr) >> 1
00026b 9556                      	lsr	q		; q = mpr * 0.10011001101b
00026c 0f50                      	add	q, mpr	; q = (q + mpr) >> 4
00026d 9556                      	lsr	q
00026e 9556                      	lsr	q
00026f 9556                      	lsr	q
000270 9556                      	lsr	q		; q = mpr * 0.000110011001101b
                                 
                                 	; compute the remainder as r = i - 10 * q
                                 	; calculate r = q * 10 = q * 1010b
000271 2f65                      	mov	r, q		; r = q * 1
000272 0f66                      	lsl	r		; r << 2
000273 0f66                      	lsl	r		; r = q * 100b
000274 0f65                      	add	r, q		; r = (r + q) << 1
000275 0f66                      	lsl	r		; r = q * 1010b
000276 2e06                      	mov	r0, r		; r0 = 10 * q
000277 2f60                      	mov	r, mpr	; r = mpr
000278 1960                      	sub	r, r0		; r = mpr - 10 * q
                                 
                                 	; Fix any errors that occur
                                 div10_1:
000279 306a                      	cpi	r, 10		; Compare with 10
00027a f018                      	brlo	div10_2	; do nothing if r < 10
00027b 9553                      	inc	q		; fix quotient
00027c 506a                      	subi	r, 10		; fix remainder
00027d cffb                      	rjmp	div10_1	; Continue until error is corrected
                                 
                                 div10_2:
00027e 900f                      	pop	r0		; Restore registers
00027f 9508                      	ret			; Return from function
                                 
                                 ;*********************************************************************
                                 ;*	Bitmap Font Information
                                 ;*	Adapted into assembly code by Justin Goins.
                                 ;*	You can edit characters or add symbols if you choose (by modifying the data below)
                                 ;*	Each character is represented as a 8 x 16 pattern of dots (8 dots wide and 16 dots high).
                                 ;*	This implies that 16 bytes are allocated to represent each character.
                                 ;*
                                 ;*	The character information is arranged so that each line below equates to a single character.
                                 ;*	The first line is ASCII character 0, the next line is ASCII character 1,
                                 ;*	the next line is ASCII character 2, and so on.
                                 ;*	You can assign characters to any index within the extended ASCII range (0 to 255).
                                 ;*	With a bit of experimentation it's possible to define and display emojis (or any other graphical output).
                                 ;*	Be creative and have fun!
                                 ;*
                                 ;*	From original license file:
                                 ;*	Copyright 2011 Suraj N. Kurapati <https://github.com/sunaku/tamzen-font>
                                 ;*	Tamzen font is free.  You are hereby granted permission to use, copy, modify, and distribute it as you see fit.
                                 ;*	Tamzen font is provided "as is" without any express or implied warranty.
                                 ;*********************************************************************
                                 FontBitmap:
000280 0000
000281 f00f
000282 1008
000283 1008
000284 1008
000285 1008
000286 f00f
000287 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x0F, 0xF0, 0x00, 0x00	; U+0000
000288 fe03
000289 fa7f
00028a f683
00028b ea83
00028c d683
00028d aa83
00028e 567f
00028f fe03                      .DB	0x03, 0xFE, 0x7F, 0xFA, 0x83, 0xF6, 0x83, 0xEA, 0x83, 0xD6, 0x83, 0xAA, 0x7F, 0x56, 0x03, 0xFE	; U+E0A2
000290 5455
000291 aaaa
000292 5455
000293 aaaa
000294 5455
000295 aaaa
000296 5455
000297 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; U+2592
000298 5455
000299 aaaa
00029a 5455
00029b aaaa
00029c 5455
00029d aaaa
00029e 5455
00029f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0002a0 5455
0002a1 aaaa
0002a2 5455
0002a3 aaaa
0002a4 5455
0002a5 aaaa
0002a6 5455
0002a7 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0002a8 5455
0002a9 aaaa
0002aa 5455
0002ab aaaa
0002ac 5455
0002ad aaaa
0002ae 5455
0002af aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0002b0 5455
0002b1 aaaa
0002b2 5455
0002b3 aaaa
0002b4 5455
0002b5 aaaa
0002b6 5455
0002b7 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0002b8 0000
0002b9 0007
0002ba 8008
0002bb 8008
0002bc 8008
0002bd 0007
0002be 0000
0002bf 0000                      .DB	0x00, 0x00, 0x07, 0x00, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00B0
0002c0 5455
0002c1 aaaa
0002c2 5455
0002c3 aaaa
0002c4 5455
0002c5 aaaa
0002c6 5455
0002c7 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0002c8 5455
0002c9 aaaa
0002ca 5455
0002cb aaaa
0002cc 5455
0002cd aaaa
0002ce 5455
0002cf aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0002d0 5455
0002d1 aaaa
0002d2 5455
0002d3 aaaa
0002d4 5455
0002d5 aaaa
0002d6 5455
0002d7 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0002d8 8000
0002d9 8000
0002da 8000
0002db 8000
0002dc 80ff
0002dd 0000
0002de 0000
0002df 0000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+2518
0002e0 8000
0002e1 8000
0002e2 8000
0002e3 8000
0002e4 fe00
0002e5 0000
0002e6 0000
0002e7 0000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+2510
0002e8 0000
0002e9 0000
0002ea 0000
0002eb 0000
0002ec fe00
0002ed 8000
0002ee 8000
0002ef 8000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+250C
0002f0 0000
0002f1 0000
0002f2 0000
0002f3 0000
0002f4 80ff
0002f5 8000
0002f6 8000
0002f7 8000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+2514
0002f8 8000
0002f9 8000
0002fa 8000
0002fb 8000
0002fc feff
0002fd 8000
0002fe 8000
0002ff 8000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xFF, 0xFE, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+253C
000300 5455
000301 aaaa
000302 5455
000303 aaaa
000304 5455
000305 aaaa
000306 5455
000307 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000308 5455
000309 aaaa
00030a 5455
00030b aaaa
00030c 5455
00030d aaaa
00030e 5455
00030f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000310 8000
000311 8000
000312 8000
000313 8000
000314 8000
000315 8000
000316 8000
000317 8000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+2500
000318 5455
000319 aaaa
00031a 5455
00031b aaaa
00031c 5455
00031d aaaa
00031e 5455
00031f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000320 5455
000321 aaaa
000322 5455
000323 aaaa
000324 5455
000325 aaaa
000326 5455
000327 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000328 0000
000329 0000
00032a 0000
00032b 0000
00032c feff
00032d 8000
00032e 8000
00032f 8000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+251C
000330 8000
000331 8000
000332 8000
000333 8000
000334 feff
000335 0000
000336 0000
000337 0000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+2524
000338 8000
000339 8000
00033a 8000
00033b 8000
00033c 80ff
00033d 8000
00033e 8000
00033f 8000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0xFF, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+2534
000340 8000
000341 8000
000342 8000
000343 8000
000344 fe00
000345 8000
000346 8000
000347 8000                      .DB	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xFE, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+252C
000348 0000
000349 0000
00034a 0000
00034b 0000
00034c feff
00034d 0000
00034e 0000
00034f 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+2502
000350 5455
000351 aaaa
000352 5455
000353 aaaa
000354 5455
000355 aaaa
000356 5455
000357 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000358 5455
000359 aaaa
00035a 5455
00035b aaaa
00035c 5455
00035d aaaa
00035e 5455
00035f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000360 5455
000361 aaaa
000362 5455
000363 aaaa
000364 5455
000365 aaaa
000366 5455
000367 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000368 5455
000369 aaaa
00036a 5455
00036b aaaa
00036c 5455
00036d aaaa
00036e 5455
00036f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000370 0000
000371 1001
000372 2001
000373 e007
000374 2009
000375 1009
000376 1008
000377 2004                      .DB	0x00, 0x00, 0x01, 0x10, 0x01, 0x20, 0x07, 0xE0, 0x09, 0x20, 0x09, 0x10, 0x08, 0x10, 0x04, 0x20	; U+00A3
000378 5455
000379 aaaa
00037a 5455
00037b aaaa
00037c 5455
00037d aaaa
00037e 5455
00037f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000380 0000
000381 0000
000382 0000
000383 0000
000384 0000
000385 0000
000386 0000
000387 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0020
000388 0000
000389 0000
00038a 0000
00038b 301f
00038c 0000
00038d 0000
00038e 0000
00038f 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0021
000390 0000
000391 0000
000392 001e
000393 0000
000394 0000
000395 001e
000396 0000
000397 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0022
000398 0000
000399 4002
00039a f00f
00039b 4002
00039c 4002
00039d f00f
00039e 4002
00039f 0000                      .DB	0x00, 0x00, 0x02, 0x40, 0x0F, 0xF0, 0x02, 0x40, 0x02, 0x40, 0x0F, 0xF0, 0x02, 0x40, 0x00, 0x00	; U+0023
0003a0 0000
0003a1 0000
0003a2 2006
0003a3 2009
0003a4 3839
0003a5 2009
0003a6 c008
0003a7 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x06, 0x20, 0x09, 0x20, 0x39, 0x38, 0x09, 0x20, 0x08, 0xC0, 0x00, 0x00	; U+0024
0003a8 0000
0003a9 200c
0003aa 4012
0003ab 8012
0003ac 600d
0003ad 9002
0003ae 9004
0003af 6008                      .DB	0x00, 0x00, 0x0C, 0x20, 0x12, 0x40, 0x12, 0x80, 0x0D, 0x60, 0x02, 0x90, 0x04, 0x90, 0x08, 0x60	; U+0025
0003b0 0000
0003b1 e00c
0003b2 1013
0003b3 1013
0003b4 900c
0003b5 6000
0003b6 6000
0003b7 9001                      .DB	0x00, 0x00, 0x0C, 0xE0, 0x13, 0x10, 0x13, 0x10, 0x0C, 0x90, 0x00, 0x60, 0x00, 0x60, 0x01, 0x90	; U+0026
0003b8 0000
0003b9 0000
0003ba 0000
0003bb 001e
0003bc 0000
0003bd 0000
0003be 0000
0003bf 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0027
0003c0 0000
0003c1 0000
0003c2 0000
0003c3 e003
0003c4 180c
0003c5 0410
0003c6 0000
0003c7 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x0C, 0x18, 0x10, 0x04, 0x00, 0x00, 0x00, 0x00	; U+0028
0003c8 0000
0003c9 0000
0003ca 0410
0003cb 180c
0003cc e003
0003cd 0000
0003ce 0000
0003cf 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x10, 0x04, 0x0C, 0x18, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0029
0003d0 0000
0003d1 8000
0003d2 a002
0003d3 c001
0003d4 c001
0003d5 a002
0003d6 8000
0003d7 0000                      .DB	0x00, 0x00, 0x00, 0x80, 0x02, 0xA0, 0x01, 0xC0, 0x01, 0xC0, 0x02, 0xA0, 0x00, 0x80, 0x00, 0x00	; U+002A
0003d8 0000
0003d9 8000
0003da 8000
0003db 8000
0003dc f007
0003dd 8000
0003de 8000
0003df 8000                      .DB	0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x07, 0xF0, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80	; U+002B
0003e0 0000
0003e1 0000
0003e2 0000
0003e3 3200
0003e4 3c00
0003e5 0000
0003e6 0000
0003e7 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+002C
0003e8 0000
0003e9 8000
0003ea 8000
0003eb 8000
0003ec 8000
0003ed 8000
0003ee 8000
0003ef 0000                      .DB	0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00	; U+002D
0003f0 0000
0003f1 0000
0003f2 0000
0003f3 3000
0003f4 3000
0003f5 0000
0003f6 0000
0003f7 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+002E
0003f8 0000
0003f9 0c00
0003fa 3000
0003fb c000
0003fc 0003
0003fd 000c
0003fe 0000
0003ff 0000                      .DB	0x00, 0x00, 0x00, 0x0C, 0x00, 0x30, 0x00, 0xC0, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00	; U+002F
000400 0000
000401 e007
000402 5008
000403 9008
000404 1009
000405 100a
000406 e007
000407 0000                      .DB	0x00, 0x00, 0x07, 0xE0, 0x08, 0x50, 0x08, 0x90, 0x09, 0x10, 0x0A, 0x10, 0x07, 0xE0, 0x00, 0x00	; U+0030
000408 0000
000409 0000
00040a 1002
00040b 1004
00040c f00f
00040d 1000
00040e 1000
00040f 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x04, 0x10, 0x0F, 0xF0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+0031
000410 0000
000411 1004
000412 3008
000413 5008
000414 9008
000415 1009
000416 1006
000417 0000                      .DB	0x00, 0x00, 0x04, 0x10, 0x08, 0x30, 0x08, 0x50, 0x08, 0x90, 0x09, 0x10, 0x06, 0x10, 0x00, 0x00	; U+0032
000418 0000
000419 2008
00041a 1008
00041b 1009
00041c 100b
00041d 100d
00041e e008
00041f 0000                      .DB	0x00, 0x00, 0x08, 0x20, 0x08, 0x10, 0x09, 0x10, 0x0B, 0x10, 0x0D, 0x10, 0x08, 0xE0, 0x00, 0x00	; U+0033
000420 0000
000421 c000
000422 4001
000423 4002
000424 4004
000425 f00f
000426 4000
000427 0000                      .DB	0x00, 0x00, 0x00, 0xC0, 0x01, 0x40, 0x02, 0x40, 0x04, 0x40, 0x0F, 0xF0, 0x00, 0x40, 0x00, 0x00	; U+0034
000428 0000
000429 200f
00042a 1009
00042b 1009
00042c 1009
00042d 1009
00042e e008
00042f 0000                      .DB	0x00, 0x00, 0x0F, 0x20, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x08, 0xE0, 0x00, 0x00	; U+0035
000430 0000
000431 e003
000432 1005
000433 1009
000434 1009
000435 1001
000436 e000
000437 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x05, 0x10, 0x09, 0x10, 0x09, 0x10, 0x01, 0x10, 0x00, 0xE0, 0x00, 0x00	; U+0036
000438 0000
000439 0008
00043a 0008
00043b 3008
00043c c008
00043d 000b
00043e 000c
00043f 0000                      .DB	0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x30, 0x08, 0xC0, 0x0B, 0x00, 0x0C, 0x00, 0x00, 0x00	; U+0037
000440 0000
000441 e006
000442 1009
000443 1009
000444 1009
000445 1009
000446 e006
000447 0000                      .DB	0x00, 0x00, 0x06, 0xE0, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x06, 0xE0, 0x00, 0x00	; U+0038
000448 0000
000449 0007
00044a 8008
00044b 9008
00044c 9008
00044d a008
00044e c007
00044f 0000                      .DB	0x00, 0x00, 0x07, 0x00, 0x08, 0x80, 0x08, 0x90, 0x08, 0x90, 0x08, 0xA0, 0x07, 0xC0, 0x00, 0x00	; U+0039
000450 0000
000451 0000
000452 0000
000453 3006
000454 3006
000455 0000
000456 0000
000457 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x30, 0x06, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+003A
000458 0000
000459 0000
00045a 0000
00045b 3206
00045c 3c06
00045d 0000
00045e 0000
00045f 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x32, 0x06, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+003B
000460 0000
000461 0000
000462 8000
000463 4001
000464 2002
000465 1004
000466 0000
000467 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x40, 0x02, 0x20, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00	; U+003C
000468 0000
000469 4002
00046a 4002
00046b 4002
00046c 4002
00046d 4002
00046e 4002
00046f 0000                      .DB	0x00, 0x00, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x00, 0x00	; U+003D
000470 0000
000471 0000
000472 1004
000473 2002
000474 4001
000475 8000
000476 0000
000477 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 0x02, 0x20, 0x01, 0x40, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00	; U+003E
000478 0000
000479 0008
00047a 0010
00047b 3011
00047c 0012
00047d 0014
00047e 0008
00047f 0000                      .DB	0x00, 0x00, 0x08, 0x00, 0x10, 0x00, 0x11, 0x30, 0x12, 0x00, 0x14, 0x00, 0x08, 0x00, 0x00, 0x00	; U+003F
000480 0000
000481 f007
000482 0808
000483 c411
000484 2412
000485 2412
000486 440a
000487 e407                      .DB	0x00, 0x00, 0x07, 0xF0, 0x08, 0x08, 0x11, 0xC4, 0x12, 0x24, 0x12, 0x24, 0x0A, 0x44, 0x07, 0xE4	; U+0040
000488 0000
000489 f003
00048a 8004
00048b 8008
00048c 8008
00048d 8004
00048e f003
00048f 0000                      .DB	0x00, 0x00, 0x03, 0xF0, 0x04, 0x80, 0x08, 0x80, 0x08, 0x80, 0x04, 0x80, 0x03, 0xF0, 0x00, 0x00	; U+0041
000490 0000
000491 f00f
000492 1009
000493 1009
000494 1009
000495 1009
000496 e006
000497 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x06, 0xE0, 0x00, 0x00	; U+0042
000498 0000
000499 c003
00049a 2004
00049b 1008
00049c 1008
00049d 1008
00049e 1008
00049f 0000                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x00, 0x00	; U+0043
0004a0 0000
0004a1 f00f
0004a2 1008
0004a3 1008
0004a4 1008
0004a5 2004
0004a6 c003
0004a7 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x04, 0x20, 0x03, 0xC0, 0x00, 0x00	; U+0044
0004a8 0000
0004a9 f00f
0004aa 1009
0004ab 1009
0004ac 1009
0004ad 1009
0004ae 1008
0004af 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x09, 0x10, 0x08, 0x10, 0x00, 0x00	; U+0045
0004b0 0000
0004b1 f00f
0004b2 0009
0004b3 0009
0004b4 0009
0004b5 0009
0004b6 0008
0004b7 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00	; U+0046
0004b8 0000
0004b9 c003
0004ba 2004
0004bb 1008
0004bc 1008
0004bd 9008
0004be f008
0004bf 0000                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x08, 0x10, 0x08, 0x10, 0x08, 0x90, 0x08, 0xF0, 0x00, 0x00	; U+0047
0004c0 0000
0004c1 f00f
0004c2 0001
0004c3 0001
0004c4 0001
0004c5 0001
0004c6 f00f
0004c7 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x0F, 0xF0, 0x00, 0x00	; U+0048
0004c8 0000
0004c9 0000
0004ca 1008
0004cb 1008
0004cc f00f
0004cd 1008
0004ce 1008
0004cf 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x08, 0x10, 0x0F, 0xF0, 0x08, 0x10, 0x08, 0x10, 0x00, 0x00	; U+0049
0004d0 0000
0004d1 6000
0004d2 1000
0004d3 1000
0004d4 1000
0004d5 1000
0004d6 e00f
0004d7 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+004A
0004d8 0000
0004d9 f00f
0004da 8001
0004db 8001
0004dc 4002
0004dd 2004
0004de 1008
0004df 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x01, 0x80, 0x01, 0x80, 0x02, 0x40, 0x04, 0x20, 0x08, 0x10, 0x00, 0x00	; U+004B
0004e0 0000
0004e1 f00f
0004e2 1000
0004e3 1000
0004e4 1000
0004e5 1000
0004e6 1000
0004e7 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+004C
0004e8 0000
0004e9 f00f
0004ea 0004
0004eb 0002
0004ec 8001
0004ed 0002
0004ee 0004
0004ef f00f                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x04, 0x00, 0x02, 0x00, 0x01, 0x80, 0x02, 0x00, 0x04, 0x00, 0x0F, 0xF0	; U+004D
0004f0 0000
0004f1 f00f
0004f2 0004
0004f3 0002
0004f4 0001
0004f5 8000
0004f6 f00f
0004f7 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x04, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x80, 0x0F, 0xF0, 0x00, 0x00	; U+004E
0004f8 0000
0004f9 e007
0004fa 1008
0004fb 1008
0004fc 1008
0004fd 1008
0004fe e007
0004ff 0000                      .DB	0x00, 0x00, 0x07, 0xE0, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x07, 0xE0, 0x00, 0x00	; U+004F
000500 0000
000501 f00f
000502 8008
000503 8008
000504 8008
000505 8008
000506 0007
000507 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x07, 0x00, 0x00, 0x00	; U+0050
000508 0000
000509 e007
00050a 1008
00050b 1008
00050c 1008
00050d 1808
00050e e407
00050f 0000                      .DB	0x00, 0x00, 0x07, 0xE0, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x08, 0x18, 0x07, 0xE4, 0x00, 0x00	; U+0051
000510 0000
000511 f00f
000512 8008
000513 8008
000514 c008
000515 a008
000516 1007
000517 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x08, 0x80, 0x08, 0x80, 0x08, 0xC0, 0x08, 0xA0, 0x07, 0x10, 0x00, 0x00	; U+0052
000518 0000
000519 1006
00051a 1009
00051b 1009
00051c 9008
00051d 9008
00051e 6008
00051f 0000                      .DB	0x00, 0x00, 0x06, 0x10, 0x09, 0x10, 0x09, 0x10, 0x08, 0x90, 0x08, 0x90, 0x08, 0x60, 0x00, 0x00	; U+0053
000520 0000
000521 0008
000522 0008
000523 0008
000524 f00f
000525 0008
000526 0008
000527 0008                      .DB	0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x0F, 0xF0, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00	; U+0054
000528 0000
000529 e00f
00052a 1000
00052b 1000
00052c 1000
00052d 1000
00052e e00f
00052f 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+0055
000530 0000
000531 000f
000532 c000
000533 3000
000534 3000
000535 c000
000536 000f
000537 0000                      .DB	0x00, 0x00, 0x0F, 0x00, 0x00, 0xC0, 0x00, 0x30, 0x00, 0x30, 0x00, 0xC0, 0x0F, 0x00, 0x00, 0x00	; U+0056
000538 0000
000539 f00f
00053a 1000
00053b 2000
00053c c000
00053d 2000
00053e 1000
00053f f00f                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x00, 0x10, 0x00, 0x20, 0x00, 0xC0, 0x00, 0x20, 0x00, 0x10, 0x0F, 0xF0	; U+0057
000540 0000
000541 300c
000542 4002
000543 8001
000544 8001
000545 4002
000546 300c
000547 0000                      .DB	0x00, 0x00, 0x0C, 0x30, 0x02, 0x40, 0x01, 0x80, 0x01, 0x80, 0x02, 0x40, 0x0C, 0x30, 0x00, 0x00	; U+0058
000548 0000
000549 000c
00054a 0002
00054b 0001
00054c f000
00054d 0001
00054e 0002
00054f 000c                      .DB	0x00, 0x00, 0x0C, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x02, 0x00, 0x0C, 0x00	; U+0059
000550 0000
000551 3008
000552 5008
000553 9008
000554 1009
000555 100a
000556 100c
000557 1008                      .DB	0x00, 0x00, 0x08, 0x30, 0x08, 0x50, 0x08, 0x90, 0x09, 0x10, 0x0A, 0x10, 0x0C, 0x10, 0x08, 0x10	; U+005A
000558 0000
000559 0000
00055a 0000
00055b fc1f
00055c 0410
00055d 0410
00055e 0410
00055f 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFC, 0x10, 0x04, 0x10, 0x04, 0x10, 0x04, 0x00, 0x00	; U+005B
000560 0000
000561 000c
000562 0003
000563 c000
000564 3000
000565 0c00
000566 0000
000567 0000                      .DB	0x00, 0x00, 0x0C, 0x00, 0x03, 0x00, 0x00, 0xC0, 0x00, 0x30, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00	; U+005C
000568 0000
000569 0410
00056a 0410
00056b 0410
00056c fc1f
00056d 0000
00056e 0000
00056f 0000                      .DB	0x00, 0x00, 0x10, 0x04, 0x10, 0x04, 0x10, 0x04, 0x1F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+005D
000570 0000
000571 0002
000572 0004
000573 0008
000574 0004
000575 0002
000576 0000
000577 0000                      .DB	0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00	; U+005E
000578 0400
000579 0400
00057a 0400
00057b 0400
00057c 0400
00057d 0400
00057e 0400
00057f 0400                      .DB	0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04	; U+005F
000580 0000
000581 0000
000582 0000
000583 0010
000584 0008
000585 0004
000586 0000
000587 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00	; U+0060
000588 0000
000589 6000
00058a 9002
00058b 9002
00058c 9002
00058d 9002
00058e f001
00058f 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x02, 0x90, 0x02, 0x90, 0x02, 0x90, 0x02, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+0061
000590 0000
000591 f01f
000592 1001
000593 1002
000594 1002
000595 1002
000596 e001
000597 0000                      .DB	0x00, 0x00, 0x1F, 0xF0, 0x01, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+0062
000598 0000
000599 e001
00059a 1002
00059b 1002
00059c 1002
00059d 1002
00059e 2001
00059f 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0x20, 0x00, 0x00	; U+0063
0005a0 0000
0005a1 e001
0005a2 1002
0005a3 1002
0005a4 1002
0005a5 2002
0005a6 f01f
0005a7 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x20, 0x1F, 0xF0, 0x00, 0x00	; U+0064
0005a8 0000
0005a9 e001
0005aa 9002
0005ab 9002
0005ac 9002
0005ad 9002
0005ae 9001
0005af 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x90, 0x02, 0x90, 0x02, 0x90, 0x02, 0x90, 0x01, 0x90, 0x00, 0x00	; U+0065
0005b0 0000
0005b1 0002
0005b2 0002
0005b3 f00f
0005b4 0012
0005b5 0012
0005b6 0012
0005b7 0000                      .DB	0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0F, 0xF0, 0x12, 0x00, 0x12, 0x00, 0x12, 0x00, 0x00, 0x00	; U+0066
0005b8 0000
0005b9 e001
0005ba 1202
0005bb 1202
0005bc 1202
0005bd 1202
0005be fc03
0005bf 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x12, 0x02, 0x12, 0x02, 0x12, 0x02, 0x12, 0x03, 0xFC, 0x00, 0x00	; U+0067
0005c0 0000
0005c1 f01f
0005c2 0001
0005c3 0002
0005c4 0002
0005c5 0002
0005c6 f001
0005c7 0000                      .DB	0x00, 0x00, 0x1F, 0xF0, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0xF0, 0x00, 0x00	; U+0068
0005c8 0000
0005c9 0000
0005ca 1002
0005cb 1002
0005cc f01b
0005cd 1000
0005ce 1000
0005cf 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x02, 0x10, 0x1B, 0xF0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+0069
0005d0 0000
0005d1 0000
0005d2 0200
0005d3 0202
0005d4 0202
0005d5 fc1b
0005d6 0000
0005d7 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x1B, 0xFC, 0x00, 0x00, 0x00, 0x00	; U+006A
0005d8 0000
0005d9 f01f
0005da 4000
0005db 8000
0005dc 4001
0005dd 2002
0005de 1000
0005df 0000                      .DB	0x00, 0x00, 0x1F, 0xF0, 0x00, 0x40, 0x00, 0x80, 0x01, 0x40, 0x02, 0x20, 0x00, 0x10, 0x00, 0x00	; U+006B
0005e0 0000
0005e1 0010
0005e2 0010
0005e3 e01f
0005e4 1000
0005e5 1000
0005e6 1000
0005e7 0000                      .DB	0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x1F, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+006c
0005e8 0000
0005e9 f003
0005ea 0002
0005eb 0002
0005ec f001
0005ed 0002
0005ee 0002
0005ef f001                      .DB	0x00, 0x00, 0x03, 0xF0, 0x02, 0x00, 0x02, 0x00, 0x01, 0xF0, 0x02, 0x00, 0x02, 0x00, 0x01, 0xF0	; U+006d
0005f0 0000
0005f1 f003
0005f2 0001
0005f3 0002
0005f4 0002
0005f5 0002
0005f6 f001
0005f7 0000                      .DB	0x00, 0x00, 0x03, 0xF0, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0xF0, 0x00, 0x00	; U+006e
0005f8 0000
0005f9 e001
0005fa 1002
0005fb 1002
0005fc 1002
0005fd 1002
0005fe e001
0005ff 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+006F
000600 0000
000601 fe03
000602 1001
000603 1002
000604 1002
000605 1002
000606 e001
000607 0000                      .DB	0x00, 0x00, 0x03, 0xFE, 0x01, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+0070
000608 0000
000609 e001
00060a 1002
00060b 1002
00060c 1002
00060d 2002
00060e fe03
00060f 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x20, 0x03, 0xFE, 0x00, 0x00	; U+0071
000610 0000
000611 f003
000612 0001
000613 0002
000614 0002
000615 0002
000616 0001
000617 0000                      .DB	0x00, 0x00, 0x03, 0xF0, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00	; U+0072
000618 0000
000619 1001
00061a 9002
00061b 9002
00061c 5002
00061d 5002
00061e 2002
00061f 0000                      .DB	0x00, 0x00, 0x01, 0x10, 0x02, 0x90, 0x02, 0x90, 0x02, 0x50, 0x02, 0x50, 0x02, 0x20, 0x00, 0x00	; U+0073
000620 0000
000621 0002
000622 0002
000623 e00f
000624 1002
000625 1002
000626 1002
000627 0000                      .DB	0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0F, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x00, 0x00	; U+0074
000628 0000
000629 e003
00062a 1000
00062b 1000
00062c 1000
00062d 2000
00062e f003
00062f 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x03, 0xF0, 0x00, 0x00	; U+0075
000630 0000
000631 0003
000632 c000
000633 3000
000634 3000
000635 c000
000636 0003
000637 0000                      .DB	0x00, 0x00, 0x03, 0x00, 0x00, 0xC0, 0x00, 0x30, 0x00, 0x30, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x00	; U+0076
000638 0000
000639 e003
00063a 1000
00063b 1000
00063c e001
00063d 1000
00063e 1000
00063f e003                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x01, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x03, 0xE0	; U+0077
000640 0000
000641 1002
000642 2001
000643 c000
000644 c000
000645 2001
000646 1002
000647 0000                      .DB	0x00, 0x00, 0x02, 0x10, 0x01, 0x20, 0x00, 0xC0, 0x00, 0xC0, 0x01, 0x20, 0x02, 0x10, 0x00, 0x00	; U+0078
000648 0000
000649 e003
00064a 1200
00064b 1200
00064c 1200
00064d 2200
00064e fc03
00064f 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x12, 0x00, 0x12, 0x00, 0x12, 0x00, 0x22, 0x03, 0xFC, 0x00, 0x00	; U+0079
000650 0000
000651 1002
000652 3002
000653 5002
000654 9002
000655 1003
000656 1002
000657 0000                      .DB	0x00, 0x00, 0x02, 0x10, 0x02, 0x30, 0x02, 0x50, 0x02, 0x90, 0x03, 0x10, 0x02, 0x10, 0x00, 0x00	; U+007A
000658 0000
000659 0000
00065a 8000
00065b 8000
00065c 780f
00065d 0410
00065e 0410
00065f 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x0F, 0x78, 0x10, 0x04, 0x10, 0x04, 0x00, 0x00	; U+007B
000660 0000
000661 0000
000662 0000
000663 0000
000664 fc3f
000665 0000
000666 0000
000667 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+007C
000668 0000
000669 0410
00066a 0410
00066b 780f
00066c 8000
00066d 8000
00066e 0000
00066f 0000                      .DB	0x00, 0x00, 0x10, 0x04, 0x10, 0x04, 0x0F, 0x78, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00	; U+007D
000670 0000
000671 0006
000672 0008
000673 0008
000674 0004
000675 0002
000676 0002
000677 000c                      .DB	0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0C, 0x00	; U+007E
000678 5455
000679 aaaa
00067a 5455
00067b aaaa
00067c 5455
00067d aaaa
00067e 5455
00067f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000680 5455
000681 aaaa
000682 5455
000683 aaaa
000684 5455
000685 aaaa
000686 5455
000687 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000688 5455
000689 aaaa
00068a 5455
00068b aaaa
00068c 5455
00068d aaaa
00068e 5455
00068f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000690 5455
000691 aaaa
000692 5455
000693 aaaa
000694 5455
000695 aaaa
000696 5455
000697 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000698 5455
000699 aaaa
00069a 5455
00069b aaaa
00069c 5455
00069d aaaa
00069e 5455
00069f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0006a0 5455
0006a1 aaaa
0006a2 5455
0006a3 aaaa
0006a4 5455
0006a5 aaaa
0006a6 5455
0006a7 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0006a8 5455
0006a9 aaaa
0006aa 5455
0006ab aaaa
0006ac 5455
0006ad aaaa
0006ae 5455
0006af aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0006b0 5455
0006b1 aaaa
0006b2 5455
0006b3 aaaa
0006b4 5455
0006b5 aaaa
0006b6 5455
0006b7 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0006b8 5455
0006b9 aaaa
0006ba 5455
0006bb aaaa
0006bc 5455
0006bd aaaa
0006be 5455
0006bf aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0006c0 5455
0006c1 aaaa
0006c2 5455
0006c3 aaaa
0006c4 5455
0006c5 aaaa
0006c6 5455
0006c7 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0006c8 5455
0006c9 aaaa
0006ca 5455
0006cb aaaa
0006cc 5455
0006cd aaaa
0006ce 5455
0006cf aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0006d0 5455
0006d1 aaaa
0006d2 5455
0006d3 aaaa
0006d4 5455
0006d5 aaaa
0006d6 5455
0006d7 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0006d8 5455
0006d9 aaaa
0006da 5455
0006db aaaa
0006dc 5455
0006dd aaaa
0006de 5455
0006df aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0006e0 5455
0006e1 aaaa
0006e2 5455
0006e3 aaaa
0006e4 5455
0006e5 aaaa
0006e6 5455
0006e7 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0006e8 5455
0006e9 aaaa
0006ea 5455
0006eb aaaa
0006ec 5455
0006ed aaaa
0006ee 5455
0006ef aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0006f0 5455
0006f1 aaaa
0006f2 5455
0006f3 aaaa
0006f4 5455
0006f5 aaaa
0006f6 5455
0006f7 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0006f8 5455
0006f9 aaaa
0006fa 5455
0006fb aaaa
0006fc 5455
0006fd aaaa
0006fe 5455
0006ff aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000700 5455
000701 aaaa
000702 5455
000703 aaaa
000704 5455
000705 aaaa
000706 5455
000707 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000708 5455
000709 aaaa
00070a 5455
00070b aaaa
00070c 5455
00070d aaaa
00070e 5455
00070f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000710 5455
000711 aaaa
000712 5455
000713 aaaa
000714 5455
000715 aaaa
000716 5455
000717 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000718 5455
000719 aaaa
00071a 5455
00071b aaaa
00071c 5455
00071d aaaa
00071e 5455
00071f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000720 5455
000721 aaaa
000722 5455
000723 aaaa
000724 5455
000725 aaaa
000726 5455
000727 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000728 5455
000729 aaaa
00072a 5455
00072b aaaa
00072c 5455
00072d aaaa
00072e 5455
00072f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000730 5455
000731 aaaa
000732 5455
000733 aaaa
000734 5455
000735 aaaa
000736 5455
000737 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000738 5455
000739 aaaa
00073a 5455
00073b aaaa
00073c 5455
00073d aaaa
00073e 5455
00073f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000740 5455
000741 aaaa
000742 5455
000743 aaaa
000744 5455
000745 aaaa
000746 5455
000747 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000748 5455
000749 aaaa
00074a 5455
00074b aaaa
00074c 5455
00074d aaaa
00074e 5455
00074f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000750 5455
000751 aaaa
000752 5455
000753 aaaa
000754 5455
000755 aaaa
000756 5455
000757 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000758 5455
000759 aaaa
00075a 5455
00075b aaaa
00075c 5455
00075d aaaa
00075e 5455
00075f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000760 5455
000761 aaaa
000762 5455
000763 aaaa
000764 5455
000765 aaaa
000766 5455
000767 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000768 5455
000769 aaaa
00076a 5455
00076b aaaa
00076c 5455
00076d aaaa
00076e 5455
00076f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000770 5455
000771 aaaa
000772 5455
000773 aaaa
000774 5455
000775 aaaa
000776 5455
000777 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000778 5455
000779 aaaa
00077a 5455
00077b aaaa
00077c 5455
00077d aaaa
00077e 5455
00077f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000780 0000
000781 0000
000782 0000
000783 0000
000784 0000
000785 0000
000786 0000
000787 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00A0
000788 0000
000789 0000
00078a 0000
00078b 3e03
00078c 0000
00078d 0000
00078e 0000
00078f 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00A1
000790 0000
000791 c003
000792 2004
000793 2004
000794 f81f
000795 2004
000796 2004
000797 4002                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x04, 0x20, 0x1F, 0xF8, 0x04, 0x20, 0x04, 0x20, 0x02, 0x40	; U+00A2
000798 0000
000799 1001
00079a 2001
00079b e007
00079c 2009
00079d 1009
00079e 1008
00079f 2004                      .DB	0x00, 0x00, 0x01, 0x10, 0x01, 0x20, 0x07, 0xE0, 0x09, 0x20, 0x09, 0x10, 0x08, 0x10, 0x04, 0x20	; U+00A3
0007a0 0000
0007a1 2004
0007a2 c003
0007a3 4002
0007a4 4002
0007a5 c003
0007a6 2004
0007a7 0000                      .DB	0x00, 0x00, 0x04, 0x20, 0x03, 0xC0, 0x02, 0x40, 0x02, 0x40, 0x03, 0xC0, 0x04, 0x20, 0x00, 0x00	; U+00A4
0007a8 0000
0007a9 0008
0007aa 4005
0007ab 4003
0007ac f001
0007ad 4003
0007ae 4005
0007af 0008                      .DB	0x00, 0x00, 0x08, 0x00, 0x05, 0x40, 0x03, 0x40, 0x01, 0xF0, 0x03, 0x40, 0x05, 0x40, 0x08, 0x00	; U+00A5
0007b0 0000
0007b1 0000
0007b2 0000
0007b3 0000
0007b4 3c0f
0007b5 0000
0007b6 0000
0007b7 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00A6
0007b8 5455
0007b9 aaaa
0007ba 5455
0007bb aaaa
0007bc 5455
0007bd aaaa
0007be 5455
0007bf aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007c0 0000
0007c1 0000
0007c2 0060
0007c3 0000
0007c4 0000
0007c5 0060
0007c6 0000
0007c7 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00A8
0007c8 0000
0007c9 c003
0007ca 2004
0007cb 9009
0007cc 500a
0007cd 500a
0007ce 2004
0007cf c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x09, 0x90, 0x0A, 0x50, 0x0A, 0x50, 0x04, 0x20, 0x03, 0xC0	; U+00A9
0007d0 5455
0007d1 aaaa
0007d2 5455
0007d3 aaaa
0007d4 5455
0007d5 aaaa
0007d6 5455
0007d7 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007d8 0000
0007d9 8000
0007da 4001
0007db 2002
0007dc 9004
0007dd 4001
0007de 2002
0007df 1004                      .DB	0x00, 0x00, 0x00, 0x80, 0x01, 0x40, 0x02, 0x20, 0x04, 0x90, 0x01, 0x40, 0x02, 0x20, 0x04, 0x10	; U+00AB
0007e0 5455
0007e1 aaaa
0007e2 5455
0007e3 aaaa
0007e4 5455
0007e5 aaaa
0007e6 5455
0007e7 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007e8 0000
0007e9 8000
0007ea 8000
0007eb 8000
0007ec 8000
0007ed 8000
0007ee 8000
0007ef 0000                      .DB	0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00	; U+00AD
0007f0 5455
0007f1 aaaa
0007f2 5455
0007f3 aaaa
0007f4 5455
0007f5 aaaa
0007f6 5455
0007f7 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
0007f8 5455
0007f9 aaaa
0007fa 5455
0007fb aaaa
0007fc 5455
0007fd aaaa
0007fe 5455
0007ff aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000800 0000
000801 0007
000802 8008
000803 8008
000804 8008
000805 0007
000806 0000
000807 0000                      .DB	0x00, 0x00, 0x07, 0x00, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00B0
000808 5455
000809 aaaa
00080a 5455
00080b aaaa
00080c 5455
00080d aaaa
00080e 5455
00080f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000810 5455
000811 aaaa
000812 5455
000813 aaaa
000814 5455
000815 aaaa
000816 5455
000817 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000818 5455
000819 aaaa
00081a 5455
00081b aaaa
00081c 5455
00081d aaaa
00081e 5455
00081f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000820 5455
000821 aaaa
000822 5455
000823 aaaa
000824 5455
000825 aaaa
000826 5455
000827 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000828 5455
000829 aaaa
00082a 5455
00082b aaaa
00082c 5455
00082d aaaa
00082e 5455
00082f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000830 5455
000831 aaaa
000832 5455
000833 aaaa
000834 5455
000835 aaaa
000836 5455
000837 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000838 5455
000839 aaaa
00083a 5455
00083b aaaa
00083c 5455
00083d aaaa
00083e 5455
00083f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000840 0000
000841 0000
000842 0200
000843 0200
000844 0c00
000845 0000
000846 0000
000847 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; U+00B8
000848 5455
000849 aaaa
00084a 5455
00084b aaaa
00084c 5455
00084d aaaa
00084e 5455
00084f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000850 5455
000851 aaaa
000852 5455
000853 aaaa
000854 5455
000855 aaaa
000856 5455
000857 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000858 0000
000859 1004
00085a 2002
00085b 4001
00085c 9004
00085d 2002
00085e 4001
00085f 8000                      .DB	0x00, 0x00, 0x04, 0x10, 0x02, 0x20, 0x01, 0x40, 0x04, 0x90, 0x02, 0x20, 0x01, 0x40, 0x00, 0x80	; U+00BB
000860 5455
000861 aaaa
000862 5455
000863 aaaa
000864 5455
000865 aaaa
000866 5455
000867 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000868 5455
000869 aaaa
00086a 5455
00086b aaaa
00086c 5455
00086d aaaa
00086e 5455
00086f aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000870 5455
000871 aaaa
000872 5455
000873 aaaa
000874 5455
000875 aaaa
000876 5455
000877 aaaa                      .DB	0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA, 0x55, 0x54, 0xAA, 0xAA	; Unused character
000878 0000
000879 0000
00087a 0c00
00087b 1200
00087c 2203
00087d 0200
00087e 0400
00087f 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x12, 0x03, 0x22, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00	; U+00BF
000880 0000
000881 7000
000882 c043
000883 402c
000884 400c
000885 c003
000886 7000
000887 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x43, 0xC0, 0x2C, 0x40, 0x0C, 0x40, 0x03, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C0
000888 0000
000889 7000
00088a c003
00088b 400c
00088c 402c
00088d c043
00088e 7000
00088f 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x03, 0xC0, 0x0C, 0x40, 0x2C, 0x40, 0x43, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C1
000890 0000
000891 7000
000892 c023
000893 404c
000894 404c
000895 c023
000896 7000
000897 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x23, 0xC0, 0x4C, 0x40, 0x4C, 0x40, 0x23, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C2
000898 0000
000899 7020
00089a c043
00089b 404c
00089c 402c
00089d c023
00089e 7040
00089f 0000                      .DB	0x00, 0x00, 0x20, 0x70, 0x43, 0xC0, 0x4C, 0x40, 0x2C, 0x40, 0x23, 0xC0, 0x40, 0x70, 0x00, 0x00	; U+00C3
0008a0 0000
0008a1 7000
0008a2 c063
0008a3 400c
0008a4 400c
0008a5 c063
0008a6 7000
0008a7 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x63, 0xC0, 0x0C, 0x40, 0x0C, 0x40, 0x63, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C4
0008a8 0000
0008a9 7000
0008aa c033
0008ab 404c
0008ac 404c
0008ad c033
0008ae 7000
0008af 0000                      .DB	0x00, 0x00, 0x00, 0x70, 0x33, 0xC0, 0x4C, 0x40, 0x4C, 0x40, 0x33, 0xC0, 0x00, 0x70, 0x00, 0x00	; U+00C5
0008b0 0000
0008b1 7000
0008b2 c003
0008b3 400c
0008b4 f00f
0008b5 1009
0008b6 1009
0008b7 1008                      .DB	0x00, 0x00, 0x00, 0x70, 0x03, 0xC0, 0x0C, 0x40, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x08, 0x10	; U+00C6
0008b8 0000
0008b9 c003
0008ba 2204
0008bb 1208
0008bc 1c08
0008bd 1008
0008be 1008
0008bf 0000                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x22, 0x08, 0x12, 0x08, 0x1C, 0x08, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00C7
0008c0 0000
0008c1 f00f
0008c2 1049
0008c3 1029
0008c4 1009
0008c5 1009
0008c6 1008
0008c7 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x49, 0x10, 0x29, 0x10, 0x09, 0x10, 0x09, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00C8
0008c8 0000
0008c9 f00f
0008ca 1009
0008cb 1009
0008cc 1029
0008cd 1049
0008ce 1008
0008cf 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x29, 0x10, 0x49, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00C9
0008d0 0000
0008d1 f00f
0008d2 1029
0008d3 1049
0008d4 1049
0008d5 1029
0008d6 1008
0008d7 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x29, 0x10, 0x49, 0x10, 0x49, 0x10, 0x29, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CA
0008d8 0000
0008d9 f00f
0008da 1069
0008db 1009
0008dc 1009
0008dd 1069
0008de 1008
0008df 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x69, 0x10, 0x09, 0x10, 0x09, 0x10, 0x69, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CB
0008e0 0000
0008e1 0000
0008e2 1008
0008e3 1048
0008e4 f02f
0008e5 1008
0008e6 1008
0008e7 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x48, 0x10, 0x2F, 0xF0, 0x08, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CC
0008e8 0000
0008e9 0000
0008ea 1008
0008eb 1008
0008ec f02f
0008ed 1048
0008ee 1008
0008ef 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x08, 0x10, 0x2F, 0xF0, 0x48, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CD
0008f0 0000
0008f1 0000
0008f2 1008
0008f3 1028
0008f4 f04f
0008f5 1028
0008f6 1008
0008f7 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x28, 0x10, 0x4F, 0xF0, 0x28, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CE
0008f8 0000
0008f9 0000
0008fa 1008
0008fb 1068
0008fc f00f
0008fd 1068
0008fe 1008
0008ff 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x68, 0x10, 0x0F, 0xF0, 0x68, 0x10, 0x08, 0x10, 0x00, 0x00	; U+00CF
000900 0000
000901 0001
000902 f00f
000903 1009
000904 1009
000905 1008
000906 2004
000907 c003                      .DB	0x00, 0x00, 0x01, 0x00, 0x0F, 0xF0, 0x09, 0x10, 0x09, 0x10, 0x08, 0x10, 0x04, 0x20, 0x03, 0xC0	; U+00D0
000908 0000
000909 f02f
00090a 0044
00090b 0042
00090c 0021
00090d 8020
00090e f04f
00090f 0000                      .DB	0x00, 0x00, 0x2F, 0xF0, 0x44, 0x00, 0x42, 0x00, 0x21, 0x00, 0x20, 0x80, 0x4F, 0xF0, 0x00, 0x00	; U+00D1
000910 0000
000911 c003
000912 2004
000913 1048
000914 1028
000915 1008
000916 2004
000917 c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x48, 0x10, 0x28, 0x10, 0x08, 0x10, 0x04, 0x20, 0x03, 0xC0	; U+00D2
000918 0000
000919 c003
00091a 2004
00091b 1008
00091c 1028
00091d 1048
00091e 2004
00091f c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x08, 0x10, 0x28, 0x10, 0x48, 0x10, 0x04, 0x20, 0x03, 0xC0	; U+00D3
000920 0000
000921 c003
000922 2004
000923 1028
000924 1048
000925 1028
000926 2004
000927 c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x04, 0x20, 0x28, 0x10, 0x48, 0x10, 0x28, 0x10, 0x04, 0x20, 0x03, 0xC0	; U+00D4
000928 0000
000929 c003
00092a 2024
00092b 1048
00092c 1048
00092d 1028
00092e 2024
00092f c043                      .DB	0x00, 0x00, 0x03, 0xC0, 0x24, 0x20, 0x48, 0x10, 0x48, 0x10, 0x28, 0x10, 0x24, 0x20, 0x43, 0xC0	; U+00D5
000930 0000
000931 c003
000932 2064
000933 1008
000934 1008
000935 1008
000936 2064
000937 c003                      .DB	0x00, 0x00, 0x03, 0xC0, 0x64, 0x20, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10, 0x64, 0x20, 0x03, 0xC0	; U+00D6
000938 0000
000939 0000
00093a 2002
00093b 4001
00093c 8000
00093d 4001
00093e 2002
00093f 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x02, 0x20, 0x01, 0x40, 0x00, 0x80, 0x01, 0x40, 0x02, 0x20, 0x00, 0x00	; U+00D7
000940 0000
000941 c803
000942 3004
000943 5008
000944 9009
000945 100a
000946 200c
000947 c013                      .DB	0x00, 0x00, 0x03, 0xC8, 0x04, 0x30, 0x08, 0x50, 0x09, 0x90, 0x0A, 0x10, 0x0C, 0x20, 0x13, 0xC0	; U+00D8
000948 0000
000949 e00f
00094a 1040
00094b 1020
00094c 1000
00094d 1000
00094e e00f
00094f 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x40, 0x10, 0x20, 0x10, 0x00, 0x10, 0x00, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+00D9
000950 0000
000951 e00f
000952 1000
000953 1000
000954 1020
000955 1040
000956 e00f
000957 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x20, 0x10, 0x40, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+00DA
000958 0000
000959 e00f
00095a 1020
00095b 1040
00095c 1040
00095d 1020
00095e e00f
00095f 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x20, 0x10, 0x40, 0x10, 0x40, 0x10, 0x20, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+00DB
000960 0000
000961 e00f
000962 1060
000963 1000
000964 1000
000965 1060
000966 e00f
000967 0000                      .DB	0x00, 0x00, 0x0F, 0xE0, 0x60, 0x10, 0x00, 0x10, 0x00, 0x10, 0x60, 0x10, 0x0F, 0xE0, 0x00, 0x00	; U+00DC
000968 0000
000969 000c
00096a 0062
00096b 0001
00096c f000
00096d 0001
00096e 0062
00096f 000c                      .DB	0x00, 0x00, 0x0C, 0x00, 0x62, 0x00, 0x01, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x62, 0x00, 0x0C, 0x00	; U+00DD
000970 0000
000971 f00f
000972 2004
000973 2004
000974 2004
000975 2004
000976 c003
000977 0000                      .DB	0x00, 0x00, 0x0F, 0xF0, 0x04, 0x20, 0x04, 0x20, 0x04, 0x20, 0x04, 0x20, 0x03, 0xC0, 0x00, 0x00	; U+00DE
000978 0000
000979 f007
00097a 0008
00097b 0008
00097c 1009
00097d 100b
00097e e004
00097f 0000                      .DB	0x00, 0x00, 0x07, 0xF0, 0x08, 0x00, 0x08, 0x00, 0x09, 0x10, 0x0B, 0x10, 0x04, 0xE0, 0x00, 0x00	; U+00DF
000980 0000
000981 6000
000982 9012
000983 900a
000984 9002
000985 9002
000986 f001
000987 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x12, 0x90, 0x0A, 0x90, 0x02, 0x90, 0x02, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E0
000988 0000
000989 6000
00098a 9002
00098b 9002
00098c 900a
00098d 9012
00098e f001
00098f 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x02, 0x90, 0x02, 0x90, 0x0A, 0x90, 0x12, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E1
000990 0000
000991 6000
000992 900a
000993 9012
000994 9012
000995 900a
000996 f001
000997 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x0A, 0x90, 0x12, 0x90, 0x12, 0x90, 0x0A, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E2
000998 0000
000999 6008
00099a 9012
00099b 9012
00099c 900a
00099d 900a
00099e f011
00099f 0000                      .DB	0x00, 0x00, 0x08, 0x60, 0x12, 0x90, 0x12, 0x90, 0x0A, 0x90, 0x0A, 0x90, 0x11, 0xF0, 0x00, 0x00	; U+00E3
0009a0 0000
0009a1 6000
0009a2 901a
0009a3 9002
0009a4 9002
0009a5 901a
0009a6 f001
0009a7 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x1A, 0x90, 0x02, 0x90, 0x02, 0x90, 0x1A, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E4
0009a8 0000
0009a9 6000
0009aa 9032
0009ab 904a
0009ac 904a
0009ad 9032
0009ae f001
0009af 0000                      .DB	0x00, 0x00, 0x00, 0x60, 0x32, 0x90, 0x4A, 0x90, 0x4A, 0x90, 0x32, 0x90, 0x01, 0xF0, 0x00, 0x00	; U+00E5
0009b0 0000
0009b1 6000
0009b2 9002
0009b3 9002
0009b4 e001
0009b5 9002
0009b6 9002
0009b7 9001                      .DB	0x00, 0x00, 0x00, 0x60, 0x02, 0x90, 0x02, 0x90, 0x01, 0xE0, 0x02, 0x90, 0x02, 0x90, 0x01, 0x90	; U+00E6
0009b8 0000
0009b9 e001
0009ba 1202
0009bb 1202
0009bc 1c02
0009bd 1002
0009be 2001
0009bf 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x12, 0x02, 0x12, 0x02, 0x1C, 0x02, 0x10, 0x01, 0x20, 0x00, 0x00	; U+00E7
0009c0 0000
0009c1 e001
0009c2 9012
0009c3 900a
0009c4 9002
0009c5 9002
0009c6 9001
0009c7 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x12, 0x90, 0x0A, 0x90, 0x02, 0x90, 0x02, 0x90, 0x01, 0x90, 0x00, 0x00	; U+00E8
0009c8 0000
0009c9 e001
0009ca 9002
0009cb 9002
0009cc 900a
0009cd 9012
0009ce 9001
0009cf 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x90, 0x02, 0x90, 0x0A, 0x90, 0x12, 0x90, 0x01, 0x90, 0x00, 0x00	; U+00E9
0009d0 0000
0009d1 e001
0009d2 900a
0009d3 9012
0009d4 9012
0009d5 900a
0009d6 9001
0009d7 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x0A, 0x90, 0x12, 0x90, 0x12, 0x90, 0x0A, 0x90, 0x01, 0x90, 0x00, 0x00	; U+00EA
0009d8 0000
0009d9 e001
0009da 901a
0009db 9002
0009dc 9002
0009dd 901a
0009de 9001
0009df 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x1A, 0x90, 0x02, 0x90, 0x02, 0x90, 0x1A, 0x90, 0x01, 0x90, 0x00, 0x00	; U+00EB
0009e0 0000
0009e1 0000
0009e2 1012
0009e3 100a
0009e4 f003
0009e5 1000
0009e6 1000
0009e7 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x12, 0x10, 0x0A, 0x10, 0x03, 0xF0, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00	; U+00EC
0009e8 0000
0009e9 0000
0009ea 1002
0009eb 1002
0009ec f00b
0009ed 1010
0009ee 1000
0009ef 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x02, 0x10, 0x0B, 0xF0, 0x10, 0x10, 0x00, 0x10, 0x00, 0x00	; U+00ED
0009f0 0000
0009f1 0000
0009f2 100a
0009f3 1012
0009f4 f013
0009f5 1008
0009f6 1000
0009f7 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x0A, 0x10, 0x12, 0x10, 0x13, 0xF0, 0x08, 0x10, 0x00, 0x10, 0x00, 0x00	; U+00EE
0009f8 0000
0009f9 0000
0009fa 101a
0009fb 1002
0009fc f003
0009fd 1018
0009fe 1000
0009ff 0000                      .DB	0x00, 0x00, 0x00, 0x00, 0x1A, 0x10, 0x02, 0x10, 0x03, 0xF0, 0x18, 0x10, 0x00, 0x10, 0x00, 0x00	; U+00EF
000a00 0000
000a01 e001
000a02 100a
000a03 102a
000a04 101a
000a05 1016
000a06 e021
000a07 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x0A, 0x10, 0x2A, 0x10, 0x1A, 0x10, 0x16, 0x10, 0x21, 0xE0, 0x00, 0x00	; U+00F0
000a08 0000
000a09 f00b
000a0a 0012
000a0b 0012
000a0c 000a
000a0d 000a
000a0e f011
000a0f 0000                      .DB	0x00, 0x00, 0x0B, 0xF0, 0x12, 0x00, 0x12, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x11, 0xF0, 0x00, 0x00	; U+00F1
000a10 0000
000a11 e001
000a12 1012
000a13 100a
000a14 1002
000a15 1002
000a16 e001
000a17 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x12, 0x10, 0x0A, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00F2
000a18 0000
000a19 e001
000a1a 1002
000a1b 1002
000a1c 100a
000a1d 1012
000a1e e001
000a1f 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x02, 0x10, 0x02, 0x10, 0x0A, 0x10, 0x12, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00F3
000a20 0000
000a21 e001
000a22 100a
000a23 1012
000a24 1012
000a25 100a
000a26 e001
000a27 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x0A, 0x10, 0x12, 0x10, 0x12, 0x10, 0x0A, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00F4
000a28 0000
000a29 e009
000a2a 1012
000a2b 1012
000a2c 100a
000a2d 100a
000a2e e011
000a2f 0000                      .DB	0x00, 0x00, 0x09, 0xE0, 0x12, 0x10, 0x12, 0x10, 0x0A, 0x10, 0x0A, 0x10, 0x11, 0xE0, 0x00, 0x00	; U+00F5
000a30 0000
000a31 e001
000a32 101a
000a33 1002
000a34 1002
000a35 101a
000a36 e001
000a37 0000                      .DB	0x00, 0x00, 0x01, 0xE0, 0x1A, 0x10, 0x02, 0x10, 0x02, 0x10, 0x1A, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00F6
000a38 0000
000a39 8000
000a3a 8000
000a3b b006
000a3c b006
000a3d 8000
000a3e 8000
000a3f 0000                      .DB	0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x06, 0xB0, 0x06, 0xB0, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00	; U+00F7
000a40 0000
000a41 e801
000a42 3002
000a43 5002
000a44 9002
000a45 1003
000a46 e005
000a47 0000                      .DB	0x00, 0x00, 0x01, 0xE8, 0x02, 0x30, 0x02, 0x50, 0x02, 0x90, 0x03, 0x10, 0x05, 0xE0, 0x00, 0x00	; U+00F8
000a48 0000
000a49 e003
000a4a 1010
000a4b 1008
000a4c 1000
000a4d 1000
000a4e f003
000a4f 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x10, 0x10, 0x08, 0x10, 0x00, 0x10, 0x00, 0x10, 0x03, 0xF0, 0x00, 0x00	; U+00F9
000a50 0000
000a51 e003
000a52 1000
000a53 1000
000a54 1008
000a55 1010
000a56 f003
000a57 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x10, 0x00, 0x10, 0x08, 0x10, 0x10, 0x10, 0x03, 0xF0, 0x00, 0x00	; U+00FA
000a58 0000
000a59 e003
000a5a 1008
000a5b 1010
000a5c 1010
000a5d 1008
000a5e f003
000a5f 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x03, 0xF0, 0x00, 0x00	; U+00FB
000a60 0000
000a61 e003
000a62 1018
000a63 1000
000a64 1000
000a65 1018
000a66 f003
000a67 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x18, 0x10, 0x00, 0x10, 0x00, 0x10, 0x18, 0x10, 0x03, 0xF0, 0x00, 0x00	; U+00FC
000a68 0000
000a69 e003
000a6a 1200
000a6b 1200
000a6c 1208
000a6d 1210
000a6e fc03
000a6f 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x00, 0x12, 0x00, 0x12, 0x08, 0x12, 0x10, 0x12, 0x03, 0xFC, 0x00, 0x00	; U+00FD
000a70 0000
000a71 fe1f
000a72 1002
000a73 1002
000a74 1002
000a75 1002
000a76 e001
000a77 0000                      .DB	0x00, 0x00, 0x1F, 0xFE, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x02, 0x10, 0x01, 0xE0, 0x00, 0x00	; U+00FE
000a78 0000
000a79 e003
000a7a 1218
000a7b 1200
000a7c 1200
000a7d 1218
000a7e fc03
000a7f 0000                      .DB	0x00, 0x00, 0x03, 0xE0, 0x18, 0x12, 0x00, 0x12, 0x00, 0x12, 0x18, 0x12, 0x03, 0xFC, 0x00, 0x00	; U+00FF
                                 
                                 .include "StringManager.asm"	; Seperate file to handle all of the strings that need to be printed
                                 
                                  * StringManager.asm
                                  *
                                  *  Created: 11/27/2022 3:56:27 PM
                                  *   Author: Will Richards
                                  */ 
                                 
                                  .include "m32U4def.inc"         ; Include definition file
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32U4.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32U4def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32U4
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32U4
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32U4DEF_INC_
                                 #endif  /* _M32U4DEF_INC_ */
                                 
                                 
                                  ; everything in this driver file needs to go into the code segment
                                 .cseg
                                 
                                 ; This should load the Welcome Message from Program memory into the LCD display area
                                 LOAD_WELCOME_MSG:
                                 
000a80 e0a0                      	ldi XL, 0x00
000a81 e0b1                      	ldi XH, 0x01
                                 
000a82 ede8                      	ldi ZL, low(STRING_WELCOME_START<<1)
000a83 e1f5                      	ldi ZH, high(STRING_WELCOME_START<<1)
                                 
                                 	; Loop to load in all the data
                                 	WELCOME_MSG_LOOP:
000a84 9105                      		lpm mpr, Z+
000a85 930d                      		st X+, mpr
                                 
000a86 3fe8                      		cpi ZL, low(STRING_WELCOME_END<<1)
000a87 f7e1                      		brne WELCOME_MSG_LOOP
                                 
000a88 9508                      	ret
                                 
                                 
                                 ; This should load the start message 
                                 LOAD_START_MSG:
                                 
000a89 e0a0                      	ldi XL, 0x00
000a8a e0b1                      	ldi XH, 0x01
                                 
000a8b e4e8                      	ldi ZL, low(STRING_GAME_START<<1)
000a8c e1f6                      	ldi ZH, high(STRING_GAME_START<<1)
                                 
                                 	; Loop to load in all the data
                                 	START_MSG_LOOP:
000a8d 9105                      		lpm mpr, Z+
000a8e 930d                      		st X+, mpr
                                 
000a8f 35e8                      		cpi ZL, low(STRING_GAME_END<<1)
000a90 f799                      		brne WELCOME_MSG_LOOP
                                 
000a91 9508                      	ret
                                 
                                 ; This should load the waiting message 
                                 LOAD_WAITING_MSG:
                                 
000a92 e0a0                      	ldi XL, 0x00
000a93 e0b1                      	ldi XH, 0x01
                                 
000a94 e2e8                      	ldi ZL, low(STRING_OPPONENT_START<<1)
000a95 e1f6                      	ldi ZH, high(STRING_OPPONENT_START<<1)
                                 
                                 	; Loop to load in all the data
                                 	WAITING_MSG_LOOP:
000a96 9105                      		lpm mpr, Z+
000a97 930d                      		st X+, mpr
                                 
000a98 34e8                      		cpi ZL, low(STRING_OPPONENT_END<<1)
000a99 f7e1                      		brne WAITING_MSG_LOOP
                                 
000a9a 9508                      	ret
                                 
                                 ; This should load the won message 
                                 LOAD_WIN_MSG:
                                 
000a9b e0a0                      	ldi XL, 0x00
000a9c e0b1                      	ldi XH, 0x01
                                 
000a9d e5e8                      	ldi ZL, low(STRING_WON_START<<1)
000a9e e1f6                      	ldi ZH, high(STRING_WON_START<<1)
                                 
                                 	; Loop to load in all the data
                                 	WIN_MSG_LOOP:
000a9f 9105                      		lpm mpr, Z+
000aa0 930d                      		st X+, mpr
                                 
000aa1 36e8                      		cpi ZL, low(STRING_WON_END<<1)
000aa2 f7e1                      		brne WIN_MSG_LOOP
                                 
000aa3 9508                      	ret
                                 
                                 ; This should load the lost message 
                                 LOAD_LOSS_MSG:
                                 
000aa4 e0a0                      	ldi XL, 0x00
000aa5 e0b1                      	ldi XH, 0x01
                                 
000aa6 e6e8                      	ldi ZL, low(STRING_LOST_START<<1)
000aa7 e1f6                      	ldi ZH, high(STRING_LOST_START<<1)
                                 
                                 	; Loop to load in all the data
                                 	LOSS_MSG_LOOP:
000aa8 9105                      		lpm mpr, Z+
000aa9 930d                      		st X+, mpr
                                 
000aaa 37e8                      		cpi ZL, low(STRING_LOST_END<<1)
000aab f7e1                      		brne LOSS_MSG_LOOP
                                 
000aac 9508                      	ret
                                 
                                 ; This should load the lost message 
                                 LOAD_DRAW_MSG:
                                 
000aad e0a0                      	ldi XL, 0x00
000aae e0b1                      	ldi XH, 0x01
                                 
000aaf e7e8                      	ldi ZL, low(STRING_DRAW_START<<1)
000ab0 e1f6                      	ldi ZH, high(STRING_DRAW_START<<1)
                                 
                                 	; Loop to load in all the data
                                 	DRAW_MSG_LOOP:
000ab1 9105                      		lpm mpr, Z+
000ab2 930d                      		st X+, mpr
                                 
000ab3 38e8                      		cpi ZL, low(STRING_DRAW_END<<1)
000ab4 f7e1                      		brne DRAW_MSG_LOOP
                                 
000ab5 9508                      	ret
                                 
                                 ; This should load the rock message 
                                 LOAD_ROCK_MSG:
                                 
000ab6 e1a0                      	ldi XL, 0x10
000ab7 e0b1                      	ldi XH, 0x01
                                 
000ab8 efe8                      	ldi ZL, low(STRING_ROCK_START<<1)
000ab9 e1f5                      	ldi ZH, high(STRING_ROCK_START<<1)
                                 
                                 	; Loop to load in all the data
                                 	ROCK_MSG_LOOP:
000aba 9105                      		lpm mpr, Z+
000abb 930d                      		st X+, mpr
                                 
000abc 30e8                      		cpi ZL, low(STRING_ROCK_END<<1)
000abd f7e1                      		brne ROCK_MSG_LOOP
                                 
000abe 9508                      	ret
                                 
                                 ; This should load the paper message
                                 LOAD_PAPER_MSG:
                                 
000abf e1a0                      	ldi XL, 0x10
000ac0 e0b1                      	ldi XH, 0x01
                                 
000ac1 e0e8                      	ldi ZL, low(STRING_PAPER_START<<1)
000ac2 e1f6                      	ldi ZH, high(STRING_PAPER_START<<1)
                                 
                                 	; Loop to load in all the data
                                 	PAPER_MSG_LOOP:
000ac3 9105                      		lpm mpr, Z+
000ac4 930d                      		st X+, mpr
                                 
000ac5 31e8                      		cpi ZL, low(STRING_PAPER_END<<1)
000ac6 f7e1                      		brne PAPER_MSG_LOOP
                                 
000ac7 9508                      	ret
                                 
                                 ; This should load the paper message
                                 LOAD_SCISSORS_MSG:
                                 
000ac8 e1a0                      	ldi XL, 0x10
000ac9 e0b1                      	ldi XH, 0x01
                                 
000aca e1e8                      	ldi ZL, low(STRING_SCISSORS_START<<1)
000acb e1f6                      	ldi ZH, high(STRING_SCISSORS_START<<1)
                                 
                                 	; Loop to load in all the data
                                 	SCISSORS_MSG_LOOP:
000acc 9105                      		lpm mpr, Z+
000acd 930d                      		st X+, mpr
                                 
000ace 32e8                      		cpi ZL, low(STRING_SCISSORS_END<<1)
000acf f7e1                      		brne SCISSORS_MSG_LOOP
                                 
000ad0 9508                      	ret
                                 
                                 ; This should load the rock message 
                                 LOAD_TOP_ROCK_MSG:
                                 
000ad1 e0a0                      	ldi XL, 0x00
000ad2 e0b1                      	ldi XH, 0x01
                                 
000ad3 efe8                      	ldi ZL, low(STRING_ROCK_START<<1)
000ad4 e1f5                      	ldi ZH, high(STRING_ROCK_START<<1)
                                 
                                 	; Loop to load in all the data
                                 	ROCK_TOP_MSG_LOOP:
000ad5 9105                      		lpm mpr, Z+
000ad6 930d                      		st X+, mpr
                                 
000ad7 30e8                      		cpi ZL, low(STRING_ROCK_END<<1)
000ad8 f7e1                      		brne ROCK_TOP_MSG_LOOP
                                 
000ad9 9508                      	ret
                                 
                                 ; This should load the paper message
                                 LOAD_TOP_PAPER_MSG:
                                 
000ada e0a0                      	ldi XL, 0x00
000adb e0b1                      	ldi XH, 0x01
                                 
000adc e0e8                      	ldi ZL, low(STRING_PAPER_START<<1)
000add e1f6                      	ldi ZH, high(STRING_PAPER_START<<1)
                                 
                                 	; Loop to load in all the data
                                 	PAPER_TOP_MSG_LOOP:
000ade 9105                      		lpm mpr, Z+
000adf 930d                      		st X+, mpr
                                 
000ae0 31e8                      		cpi ZL, low(STRING_PAPER_END<<1)
000ae1 f7e1                      		brne PAPER_TOP_MSG_LOOP
                                 
000ae2 9508                      	ret
                                 
                                 ; This should load the paper message
                                 LOAD_TOP_SCISSORS_MSG:
                                 
000ae3 e0a0                      	ldi XL, 0x00
000ae4 e0b1                      	ldi XH, 0x01
                                 
000ae5 e1e8                      	ldi ZL, low(STRING_SCISSORS_START<<1)
000ae6 e1f6                      	ldi ZH, high(STRING_SCISSORS_START<<1)
                                 
                                 	; Loop to load in all the data
                                 	SCISSORS_TOP_MSG_LOOP:
000ae7 9105                      		lpm mpr, Z+
000ae8 930d                      		st X+, mpr
                                 
000ae9 32e8                      		cpi ZL, low(STRING_SCISSORS_END<<1)
000aea f7e1                      		brne SCISSORS_TOP_MSG_LOOP
                                 
000aeb 9508                      	ret
                                 
                                 
                                 ;***********************************************************
                                 ;*	Stored Program Data
                                 ;***********************************************************
                                 
                                 ;-----------------------------------------------------------
                                 ; An example of storing a string. Note the labels before and
                                 ; after the .DB directive; these can help to access the data
                                 ;-----------------------------------------------------------
                                 
                                 ; Welcome Message
                                 STRING_WELCOME_START:
000aec 6557
000aed 636c
000aee 6d6f
000aef 2165
000af0 2020
000af1 2020
000af2 2020
000af3 2020
000af4 6c50
000af5 6165
000af6 6573
000af7 7020
000af8 6572
000af9 7373
000afa 5020
000afb 3744                          .DB		"Welcome!        Please press PD7"		
                                 STRING_WELCOME_END:
                                 
                                 ; Rock
                                 STRING_ROCK_START:
000afc 6f52
000afd 6b63
000afe 2020
000aff 2020
000b00 2020
000b01 2020
000b02 2020
000b03 2020                          .DB		"Rock            "
                                 STRING_ROCK_END:
                                 
                                 ; Paper
                                 STRING_PAPER_START:
000b04 6150
000b05 6570
000b06 2072
000b07 2020
000b08 2020
000b09 2020
000b0a 2020
000b0b 2020                          .DB		"Paper           "
                                 STRING_PAPER_END:
                                 
                                 ; Scissors
                                 STRING_SCISSORS_START:
000b0c 6353
000b0d 7369
000b0e 6f73
000b0f 7372
000b10 2020
000b11 2020
000b12 2020
000b13 2020                          .DB		"Scissors        "		
                                 STRING_SCISSORS_END:
                                 
                                 ; Waiting For Opponent 
                                 STRING_OPPONENT_START:
000b14 4552
000b15 4441
000b16 2c59
000b17 5720
000b18 6961
000b19 6974
000b1a 676e
000b1b 2020
000b1c 6f66
000b1d 2072
000b1e 6874
000b1f 2065
000b20 706f
000b21 6f70
000b22 656e
000b23 746e                          .DB		"READY, Waiting  for the opponent"		
                                 STRING_OPPONENT_END:
                                 
                                 ; Game Start
                                 STRING_GAME_START:
000b24 4147
000b25 454d
000b26 5320
000b27 4154
000b28 5452
000b29 2020
000b2a 2020
000b2b 2020                          .DB		"GAME START      "
                                 STRING_GAME_END:
                                 
                                 ; You Won!
                                 STRING_WON_START:
000b2c 6f59
000b2d 2075
000b2e 6f57
000b2f 216e
000b30 2020
000b31 2020
000b32 2020
000b33 2020                          .DB		"You Won!        "
                                 STRING_WON_END:
                                 
                                 ; You Lost!
                                 STRING_LOST_START:
000b34 6f59
000b35 2075
000b36 6f4c
000b37 7473
000b38 202e
000b39 2020
000b3a 2020
000b3b 2020                          .DB		"You Lost.       "
                                 STRING_LOST_END:
                                 
                                 ; Draw
                                 STRING_DRAW_START:
000b3c 7244
000b3d 7761
000b3e 2020
000b3f 2020
000b40 2020
000b41 2020
000b42 2020
000b43 2020                          .DB		"Draw            "
                                 STRING_DRAW_END:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32U4" register use summary:
x  :  16 y  :   0 z  :  14 r0 :  12 r1 :   9 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   8 
r13:   5 r14:   5 r15:  13 r16: 204 r17:  40 r18:  11 r19:  11 r20:   3 
r21:  28 r22:  13 r23:   0 r24:  16 r25:   5 r26:  30 r27:  27 r28:   0 
r29:   0 r30:  29 r31:  17 
Registers used: 21 out of 35 (60.0%)

"ATmega32U4" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   9 adiw  :   5 and   :   0 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  22 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 brlt  :   0 brmi  :   0 
brne  :  23 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  14 cbi   :   6 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  13 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  13 cpc   :   0 
cpi   :  25 cpse  :   0 dec   :  13 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   7 inc   :   2 jmp   :   2 
ld    :   1 ldd   :   0 ldi   : 143 lds   :   3 lpm   :  16 lsl   :   3 
lsr   :  16 mov   :  15 movw  :   1 mul   :   1 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   2 ori   :   0 out   :  25 pop   :  44 
push  :  44 rcall :  51 ret   :  50 reti  :   3 rjmp  :  12 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  14 sbic  :   0 sbis  :   0 
sbiw  :   1 sbr   :   1 sbrc  :   0 sbrs  :   6 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  15 std   :   0 sts   :  11 
sub   :   1 subi  :   1 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 42 out of 113 (37.2%)

"ATmega32U4" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001688   1338   4272   5610   32768  17.1%
[.dseg] 0x000100 0x000100      0      0      0    2560   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
